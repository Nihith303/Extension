{"version":3,"file":"js/popup.js","mappings":"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","sources":["webpack://website-info-crawler/webpack/runtime/chunk loaded","webpack://website-info-crawler/webpack/runtime/create fake namespace object","webpack://website-info-crawler/./src/components/navigator/TabNavigation.jsx","webpack://website-info-crawler/./src/tabs/utils/fetchWebsiteInfo.js","webpack://website-info-crawler/./src/tabs/summary/Summary.jsx","webpack://website-info-crawler/./src/tabs/links/Links.jsx","webpack://website-info-crawler/./src/tabs/imagestab/Images.jsx","webpack://website-info-crawler/./src/tabs/header/Header.jsx","webpack://website-info-crawler/./src/tabs/schema/Schema.jsx","webpack://website-info-crawler/./src/tabs/pagespeed/PageSpeed.jsx","webpack://website-info-crawler/./src/components/footer/Footer.jsx","webpack://website-info-crawler/./src/components/downloadpdf/Downloadpdf.jsx","webpack://website-info-crawler/./src/App.jsx","webpack://website-info-crawler/./src/popup.js","webpack://website-info-crawler/webpack/bootstrap","webpack://website-info-crawler/webpack/runtime/define property getters","webpack://website-info-crawler/webpack/runtime/ensure chunk","webpack://website-info-crawler/webpack/runtime/global","webpack://website-info-crawler/webpack/runtime/hasOwnProperty shorthand","webpack://website-info-crawler/webpack/runtime/make namespace object","webpack://website-info-crawler/webpack/runtime/jsonp chunk loading","webpack://website-info-crawler/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","import React from \"react\";\r\nimport \"./TabNavigation.css\";\r\n\r\nconst TabNavigation = ({ activeTab, setActiveTab }) => (\r\n  <div className=\"tabs\">\r\n    <button\r\n      className={`tab-button ${activeTab === \"summary\" ? \"active\" : \"\"}`}\r\n      onClick={() => setActiveTab(\"summary\")}>\r\n      Summary\r\n    </button>\r\n    <button\r\n      className={`tab-button ${activeTab === \"links\" ? \"active\" : \"\"}`}\r\n      onClick={() => setActiveTab(\"links\")}>\r\n      Links\r\n    </button>\r\n    <button\r\n      className={`tab-button ${activeTab === \"images\" ? \"active\" : \"\"}`}\r\n      onClick={() => setActiveTab(\"images\")}>\r\n      Images\r\n    </button>\r\n    <button\r\n      className={`tab-button ${activeTab === \"headers\" ? \"active\" : \"\"}`}\r\n      onClick={() => setActiveTab(\"headers\")}>\r\n      Headers\r\n    </button>\r\n    <button\r\n      className={`tab-button ${activeTab === \"schema\" ? \"active\" : \"\"}`}\r\n      onClick={() => setActiveTab(\"schema\")}>\r\n      Schema\r\n  </button>\r\n  <button\r\n      className={`tab-button ${activeTab === \"pagespeedtest\" ? \"active\" : \"\"}`}\r\n      onClick={() => setActiveTab(\"pagespeedtest\")}>\r\n      PageSpeed\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default TabNavigation;\r\n","export const fetchWebsiteInfo = async () => {\r\n  const [tab] = await chrome.tabs.query({\r\n    active: true,\r\n    currentWindow: true,\r\n  });\r\n  const tabId = tab.id;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    chrome.scripting.executeScript(\r\n      {\r\n        target: { tabId },\r\n        func: () => {\r\n          const meta = (name) =>\r\n            document.querySelector(`meta[name=\"${name}\"]`)?.content;\r\n          const robotsMeta =\r\n            document.querySelector('meta[name=\"robots\"]')?.content ||\r\n            \"Not Available\";\r\n          const xRobotsMeta =\r\n            document.querySelector('meta[http-equiv=\"X-Robots-Tag\"]')\r\n              ?.content || \"Not Available\";\r\n          const lang = document.documentElement.lang || \"Not Available\";\r\n\r\n          return {\r\n            title: document.title,\r\n            description: meta(\"description\") || \"Not Available\",\r\n            canonical:\r\n              document.querySelector('link[rel=\"canonical\"]')?.href ||\r\n              \"Not Available\",\r\n            robots: robotsMeta,\r\n            xRobots: xRobotsMeta,\r\n            lang: lang,\r\n            url: window.location.href,\r\n          };\r\n        },\r\n      },\r\n      ([result]) => {\r\n        if (result && result.result) {\r\n          resolve(result.result);\r\n        } else {\r\n          reject(new Error(\"Failed to fetch website info\"));\r\n        }\r\n      }\r\n    );\r\n  });\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { fetchWebsiteInfo } from \"../utils/fetchWebsiteInfo\";\r\nimport \"./Summary.css\";\r\n\r\nconst Summary = () => {\r\n  const [info, setInfo] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const getInfo = async () => {\r\n      try {\r\n        const data = await fetchWebsiteInfo();\r\n        setInfo(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching website info:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"active-tab-container\">\r\n      <h2>Summary</h2>\r\n      {loading ? (\r\n        <img src=\"image/loading.gif\" alt=\"Loading\" className=\"loading\"></img>\r\n      ) : (\r\n        <div className=\"info\">\r\n          <p>\r\n            <span>\r\n              <strong>Title</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.title}</span>\r\n          </p>\r\n          <p>\r\n            <span>\r\n              <strong>Description</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.description}</span>\r\n          </p>\r\n          <p>\r\n            <span>\r\n              <strong>Canonical</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.canonical}</span>\r\n          </p>\r\n          <p>\r\n            <span>\r\n              <strong>URL</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.url}</span>\r\n          </p>\r\n          <p>\r\n            <span>\r\n              <strong>Language</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.lang}</span>\r\n          </p>\r\n          <p>\r\n            <span>\r\n              <strong>Robots Meta</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.robots}</span>\r\n          </p>\r\n          <p>\r\n            <span>\r\n              <strong>X-Robots Meta</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.xRobots}</span>\r\n          </p>\r\n        </div>\r\n      )}\r\n      {info.url && (\r\n        <div className=\"buttons\">\r\n          <button\r\n            onClick={() => window.open(`${info.url}/sitemap.xml`, \"_blank\")}\r\n          >\r\n            Sitemap\r\n          </button>\r\n          <button\r\n            onClick={() => window.open(`${info.url}/robots.txt`, \"_blank\")}\r\n          >\r\n            Robots.txt\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import \"./Summary.css\";\r\n\r\n// const Summary = () => {\r\n//   const [info, setInfo] = useState({});\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // Fetch website info\r\n//   useEffect(() => {\r\n//     const fetchWebsiteInfo = async () => {\r\n//       const [tab] = await chrome.tabs.query({\r\n//         active: true,\r\n//         currentWindow: true,\r\n//       });\r\n//       const tabId = tab.id;\r\n\r\n//       chrome.scripting.executeScript(\r\n//         {\r\n//           target: { tabId },\r\n//           func: () => {\r\n//             const meta = (name) =>\r\n//               document.querySelector(`meta[name=\"${name}\"]`)?.content;\r\n//             const robotsMeta =\r\n//               document.querySelector('meta[name=\"robots\"]')?.content ||\r\n//               \"Not Available\";\r\n//             const xRobotsMeta =\r\n//               document.querySelector('meta[http-equiv=\"X-Robots-Tag\"]')\r\n//                 ?.content || \"Not Available\";\r\n//             const lang = document.documentElement.lang || \"Not Available\";\r\n\r\n//             return {\r\n//               title: document.title,\r\n//               description: meta(\"description\") || \"Not Available\",\r\n//               canonical:\r\n//                 document.querySelector('link[rel=\"canonical\"]')?.href ||\r\n//                 \"Not Available\",\r\n//               robots: robotsMeta,\r\n//               xRobots: xRobotsMeta,\r\n//               lang: lang,\r\n//               url: window.location.href,\r\n//             };\r\n//           },\r\n//         },\r\n//         ([result]) => {\r\n//           const fetchedData = result.result;\r\n//           setInfo(fetchedData);\r\n//           setLoading(false);\r\n//         }\r\n//       );\r\n//     };\r\n\r\n//     fetchWebsiteInfo();\r\n//   }, []);\r\n//   const exportToPDF = async () => {\r\n//     const jsPDF = (await import(\"jspdf\")).jsPDF;\r\n//     const doc = new jsPDF();\r\n//     doc.setFontSize(16);\r\n//     doc.text(\"Website Summary Report\", 105, 10, { align: \"center\" });\r\n//     const summaryData = [\r\n//       { label: \"Title\", value: info.title },\r\n//       { label: \"Description\", value: info.description },\r\n//       { label: \"Canonical\", value: info.canonical },\r\n//       { label: \"URL\", value: info.url },\r\n//       { label: \"Language\", value: info.lang },\r\n//       { label: \"Robots Meta\", value: info.robots },\r\n//       { label: \"X-Robots Meta\", value: info.xRobots },\r\n//     ];\r\n//     let yPosition = 20;\r\n//     summaryData.forEach((item) => {\r\n//       if (yPosition > 280) {\r\n//         doc.addPage();\r\n//         yPosition = 10;\r\n//       }\r\n//       doc.setFontSize(12);\r\n//       doc.text(`${item.label}`, 10, yPosition);\r\n//       doc.text(\":\", 40, yPosition);\r\n//       doc.setFontSize(10);\r\n//       const pageWidth = 140;\r\n//       const wrappedText = doc.splitTextToSize(\r\n//         item.value || \"Not Available\",\r\n//         pageWidth\r\n//       );\r\n\r\n//       wrappedText.forEach((line) => {\r\n//         if (yPosition > 280) {\r\n//           doc.addPage();\r\n//           yPosition = 10;\r\n//         }\r\n//         doc.text(line, 45, yPosition);\r\n//         yPosition += 7;\r\n//       });\r\n//     });\r\n//     doc.save(`${info.title}` + \" website-summary.pdf\");\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"active-tab-container\">\r\n//       <h2>Summary</h2>\r\n//       {loading ? (\r\n//         <img src=\"image/loading.gif\" alt=\"Loading\" className=\"loading\"></img>\r\n//       ) : (\r\n//         <div className=\"info\">\r\n//           <p>\r\n//             <span>\r\n//               <strong>Title</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.title}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Description</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.description}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Canonical</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.canonical}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>URL</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.url}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Language</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.lang}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Robots Meta</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.robots}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>X-Robots Meta</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.xRobots}</span>\r\n//           </p>\r\n//         </div>\r\n//       )}\r\n//       {info.url && (\r\n//         <div className=\"buttons\">\r\n//           <button\r\n//             onClick={() => window.open(`${info.url}/sitemap.xml`, \"_blank\")}\r\n//           >\r\n//             Sitemap\r\n//           </button>\r\n//           <button\r\n//             onClick={() => window.open(`${info.url}/robots.txt`, \"_blank\")}\r\n//           >\r\n//             Robots.txt\r\n//           </button>\r\n//           {/* <button onClick={exportToPDF}>Export PDF</button> */}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Summary;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import \"./Summary.css\";\r\n\r\n// const Summary = () => {\r\n//   const [info, setInfo] = useState({});\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const fetchWebsiteInfo = async () => {\r\n//       const [tab] = await chrome.tabs.query({\r\n//         active: true,\r\n//         currentWindow: true,\r\n//       });\r\n//       const tabId = tab.id;\r\n\r\n//       chrome.scripting.executeScript(\r\n//         {\r\n//           target: { tabId },\r\n//           func: () => {\r\n//             const meta = (name) =>\r\n//               document.querySelector(`meta[name=\"${name}\"]`)?.content;\r\n//             const robotsMeta =\r\n//               document.querySelector('meta[name=\"robots\"]')?.content ||\r\n//               \"Not Available\";\r\n//             const xRobotsMeta =\r\n//               document.querySelector('meta[http-equiv=\"X-Robots-Tag\"]')\r\n//                 ?.content || \"Not Available\";\r\n//             const lang = document.documentElement.lang || \"Not Available\";\r\n\r\n//             return {\r\n//               title: document.title,\r\n//               description: meta(\"description\") || \"Not Available\",\r\n//               canonical:\r\n//                 document.querySelector('link[rel=\"canonical\"]')?.href ||\r\n//                 \"Not Available\",\r\n//               robots: robotsMeta,\r\n//               xRobots: xRobotsMeta,\r\n//               lang: lang,\r\n//               url: window.location.href,\r\n//             };\r\n//           },\r\n//         },\r\n//         ([result]) => {\r\n//           const fetchedData = result.result;\r\n//           setInfo(fetchedData);\r\n//           setLoading(false);\r\n//         }\r\n//       );\r\n//     };\r\n\r\n//     fetchWebsiteInfo();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"active-tab-container\">\r\n//       <h2>Summary</h2>\r\n//       {loading ? (\r\n//         <img src=\"image/loading.gif\" alt=\"Loading\" className=\"loading\"></img>\r\n//       ) : (\r\n//         <div className=\"info\">\r\n//           <p>\r\n//             <span>\r\n//               <strong>Title</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.title}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Description</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.description}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Canonical</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.canonical}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>URL</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.url}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Language</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.lang}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Robots Meta</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.robots}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>X-Robots Meta</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.xRobots}</span>\r\n//           </p>\r\n//         </div>\r\n//       )}\r\n//       {info.url && (\r\n//         <div className=\"buttons\">\r\n//           <button\r\n//             onClick={() => window.open(`${info.url}/sitemap.xml`, \"_blank\")}\r\n//           >\r\n//             Sitemap\r\n//           </button>\r\n//           <button\r\n//             onClick={() => window.open(`${info.url}/robots.txt`, \"_blank\")}\r\n//           >\r\n//             Robots.txt\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Summary;\r\n\r\n// USing Chrome Storage.\r\n// import React, { useEffect, useState } from \"react\";\r\n// import \"./Summary.css\";\r\n\r\n// const Summary = ({ data, saveData }) => {\r\n//   const [info, setInfo] = useState(data || {});\r\n//   const [loading, setLoading] = useState(!data);\r\n\r\n//   useEffect(() => {\r\n//     if (!data) {\r\n//       const fetchWebsiteInfo = async () => {\r\n//         const [tab] = await chrome.tabs.query({\r\n//           active: true,\r\n//           currentWindow: true,\r\n//         });\r\n//         const tabId = tab.id;\r\n\r\n//         chrome.scripting.executeScript(\r\n//           {\r\n//             target: { tabId },\r\n//             func: () => {\r\n//               const meta = (name) =>\r\n//                 document.querySelector(`meta[name=\"${name}\"]`)?.content;\r\n//               const robotsMeta =\r\n//                 document.querySelector('meta[name=\"robots\"]')?.content ||\r\n//                 \"Not Available\";\r\n//               const xRobotsMeta =\r\n//                 document.querySelector('meta[http-equiv=\"X-Robots-Tag\"]')\r\n//                   ?.content || \"Not Available\";\r\n//               const lang = document.documentElement.lang || \"Not Available\";\r\n\r\n//               return {\r\n//                 title: document.title,\r\n//                 description: meta(\"description\") || \"Not Available\",\r\n//                 canonical:\r\n//                   document.querySelector('link[rel=\"canonical\"]')?.href ||\r\n//                   \"Not Available\",\r\n//                 robots: robotsMeta,\r\n//                 xRobots: xRobotsMeta,\r\n//                 lang: lang,\r\n//                 url: window.location.href,\r\n//               };\r\n//             },\r\n//           },\r\n//           ([result]) => {\r\n//             const fetchedData = result.result;\r\n//             setInfo(fetchedData);\r\n//             saveData(fetchedData);\r\n//             setLoading(false);\r\n//           }\r\n//         );\r\n//       };\r\n\r\n//       fetchWebsiteInfo();\r\n//     }\r\n//   }, [data, saveData]);\r\n\r\n//   return (\r\n//     <div className=\"active-tab-container\">\r\n//       <h2>Summary</h2>\r\n//       {loading ? (\r\n//         <img src=\"image/loading.gif\" alt=\"Loading\" className=\"loading\"></img>\r\n//       ) : (\r\n//         <div className=\"info\">\r\n//           <p>\r\n//             <span>\r\n//               <strong>Title</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.title}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Description</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.description}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Canonical</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.canonical}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>URL</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.url}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Language</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.lang}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Robots Meta</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.robots}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>X-Robots Meta</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.xRobots}</span>\r\n//           </p>\r\n//         </div>\r\n//       )}\r\n//       {info.url && (\r\n//         <div className=\"buttons\">\r\n//           <button\r\n//             onClick={() => window.open(`${info.url}/sitemap.xml`, \"_blank\")}\r\n//           >\r\n//             Sitemap\r\n//           </button>\r\n//           <button\r\n//             onClick={() => window.open(`${info.url}/robots.txt`, \"_blank\")}\r\n//           >\r\n//             Robots.txt\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Summary;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Links.css\";\r\n\r\nconst Links = () => {\r\n  const [links, setLinks] = useState([]);\r\n  const [view, setView] = useState(\"total\");\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchLinks = async () => {\r\n      const [tab] = await chrome.tabs.query({\r\n        active: true,\r\n        currentWindow: true,\r\n      });\r\n      const tabId = tab.id;\r\n\r\n      chrome.scripting.executeScript(\r\n        {\r\n          target: { tabId },\r\n          func: () => {\r\n            const links = Array.from(document.querySelectorAll(\"a\"))\r\n              .map((a) => ({\r\n                href: a.href,\r\n                title: a.textContent.trim() || \"No title\",\r\n              }))\r\n              .filter((link) => link.href);\r\n\r\n            const url = window.location.origin;\r\n\r\n            const internal = links.filter((link) => link.href.startsWith(url));\r\n            const external = links.filter((link) => !link.href.startsWith(url));\r\n            const unique = [...new Set(links.map((link) => link.href))].map(\r\n              (href) => ({\r\n                href,\r\n                title:\r\n                  links.find((link) => link.href === href)?.title || \"No title\",\r\n              })\r\n            );\r\n\r\n            return {\r\n              total: links,\r\n              internal,\r\n              external,\r\n              unique,\r\n            };\r\n          },\r\n        },\r\n        ([result]) => {\r\n          setLinks(result.result);\r\n          setLoading(false);\r\n        }\r\n      );\r\n    };\r\n\r\n    fetchLinks();\r\n  }, []);\r\n\r\n  const exportToCSV = () => {\r\n    const csvRows = [];\r\n    csvRows.push(\"URL,Title\");\r\n    links[view]?.forEach(({ href, title }) => {\r\n      csvRows.push(`\"${href}\",\"${title}\"`);\r\n    });\r\n\r\n    const csvContent = csvRows.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = `${view}-links.csv`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  return (\r\n    <div className=\"active-tab-container\">\r\n      <h2>Links</h2>\r\n      {loading ? (\r\n        <img className=\"loading\" src=\"image/loading.gif\" alt=\"Loading\"></img>\r\n      ) : (\r\n        <>\r\n          <div className=\"link-counts\">\r\n            <div className=\"link-item\">\r\n              <span>Total Links</span>\r\n              <span>{links.total?.length || 0}</span>\r\n            </div>\r\n            <div className=\"link-item\">\r\n              <span>Internal Links</span>\r\n              <span>{links.internal?.length || 0}</span>\r\n            </div>\r\n            <div className=\"link-item\">\r\n              <span>External Links</span>\r\n              <span>{links.external?.length || 0}</span>\r\n            </div>\r\n            <div className=\"link-item\">\r\n              <span>Unique Links</span>\r\n              <span>{links.unique?.length || 0}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"filter-buttons\">\r\n            <button\r\n              className={view === \"total\" ? \"active\" : \"\"}\r\n              onClick={() => setView(\"total\")}\r\n            >\r\n              Total\r\n            </button>\r\n            <button\r\n              className={view === \"internal\" ? \"active\" : \"\"}\r\n              onClick={() => setView(\"internal\")}\r\n            >\r\n              Internal\r\n            </button>\r\n            <button\r\n              className={view === \"external\" ? \"active\" : \"\"}\r\n              onClick={() => setView(\"external\")}\r\n            >\r\n              External\r\n            </button>\r\n            <button\r\n              className={view === \"unique\" ? \"active\" : \"\"}\r\n              onClick={() => setView(\"unique\")}\r\n            >\r\n              Unique\r\n            </button>\r\n            <button className=\"link-export-button\" onClick={exportToCSV}>\r\n              Export\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"links-table\">\r\n            {links[view]?.length > 0 ? (\r\n              links[view].map((link, index) => (\r\n                <React.Fragment key={index}>\r\n                  <div className=\"link-details\">\r\n                    <p>\r\n                      <strong>URL:</strong>\r\n                      <a\r\n                        href={link.href}\r\n                        className=\"link-url\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                      >\r\n                        {link.href}\r\n                      </a>\r\n                    </p>\r\n                    <p>\r\n                      <strong>Title:</strong> {link.title}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"link-count\">\r\n                    <p>\r\n                      <strong>Count:</strong>{\" \"}\r\n                      {links.total?.filter((l) => l.href === link.href)\r\n                        .length || 0}\r\n                    </p>\r\n                  </div>\r\n                </React.Fragment>\r\n              ))\r\n            ) : (\r\n              <div className=\"no-items\" id=\"no-links\">\r\n                <p>\r\n                  No Links to show in this <br /> Category\r\n                </p>\r\n                <img src=\"image/notfound.svg\" alt=\"Not Found\" />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Links;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Images.css\";\r\n\r\nconst Image = () => {\r\n  const [images, setImages] = useState({\r\n    total: [],\r\n    noAlt: [],\r\n    noLongDesc: [],\r\n    noSrc: [],\r\n  });\r\n  const [view, setView] = useState(\"total\");\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchImages = async () => {\r\n      const [tab] = await chrome.tabs.query({\r\n        active: true,\r\n        currentWindow: true,\r\n      });\r\n      const tabId = tab.id;\r\n\r\n      chrome.scripting.executeScript(\r\n        {\r\n          target: { tabId },\r\n          func: () => {\r\n            const images = Array.from(document.querySelectorAll(\"img\")).map(\r\n              (img) => ({\r\n                src: img.src || \"No SRC\",\r\n                alt: img.alt || \"No ALT\",\r\n                longDesc: img.longdesc || \"No Description\",\r\n                width: img.naturalWidth || \"N/A\",\r\n                height: img.naturalHeight || \"N/A\",\r\n              })\r\n            );\r\n\r\n            const noAlt = images.filter((img) => img.alt === \"No ALT\");\r\n            const noLongDesc = images.filter(\r\n              (img) => img.longDesc === \"No Description\"\r\n            );\r\n            const noSrc = images.filter((img) => img.src === \"No SRC\");\r\n\r\n            return {\r\n              total: images,\r\n              noAlt,\r\n              noLongDesc,\r\n              noSrc,\r\n            };\r\n          },\r\n        },\r\n        ([result]) => {\r\n          setImages(result.result);\r\n          setLoading(false);\r\n        }\r\n      );\r\n    };\r\n\r\n    fetchImages();\r\n  }, []);\r\n\r\n  const exportCSV = () => {\r\n    const csvData = images[view]\r\n      .map(\r\n        (img) =>\r\n          `${img.src},${img.alt},${img.longDesc},${img.width}x${img.height}`\r\n      )\r\n      .join(\"\\n\");\r\n    const blob = new Blob([`URL,ALT,LongDesc,Size\\n${csvData}`], {\r\n      type: \"text/csv\",\r\n    });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"images.csv\";\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const handleImageClick = (imgSrc) => {\r\n    const newTab = window.open();\r\n    if (newTab) {\r\n      newTab.document.body.innerHTML = `\r\n        <div style=\"text-align: center; margin: 20px;\">\r\n          <img src=\"${imgSrc}\" alt=\"Full Image\" style=\"max-width: 100%; height: auto; margin-bottom: 20px;\"/><br/>\r\n          <a href=\"${imgSrc}\" download=\"${imgSrc.split(\"/\").pop()}\" \r\n            style=\"display: inline-block; padding: 10px 20px; background-color: #0056b3; color: white; text-decoration: none; border-radius: 5px;\">\r\n            Download\r\n          </a>\r\n        </div>\r\n      `;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"active-tab-container\">\r\n      <h2>Images</h2>\r\n      {loading ? (\r\n        <img src=\"image/loading.gif\" alt=\"Loading\" className=\"loading\"></img>\r\n      ) : (\r\n        <>\r\n          <div className=\"image-counts\">\r\n            <div className=\"image-item\">\r\n              <span>Total Images</span>\r\n              <span>{images.total?.length || 0}</span>\r\n            </div>\r\n            <div className=\"image-item\">\r\n              <span>Without ALT</span>\r\n              <span>{images.noAlt?.length || 0}</span>\r\n            </div>\r\n            <div className=\"image-item\">\r\n              <span>Without Description</span>\r\n              <span>{images.noLongDesc?.length || 0}</span>\r\n            </div>\r\n            <div className=\"image-item\">\r\n              <span>Without SRC</span>\r\n              <span>{images.noSrc?.length || 0}</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"image-nav\">\r\n            <button onClick={() => setView(\"total\")}>Total</button>\r\n            <button onClick={() => setView(\"noAlt\")}>No ALT</button>\r\n            <button onClick={() => setView(\"noLongDesc\")}>\r\n              No Description\r\n            </button>\r\n            <button onClick={() => setView(\"noSrc\")}>No SRC</button>\r\n            <button className=\"export-button\" onClick={exportCSV}>\r\n              Export\r\n            </button>\r\n          </div>\r\n          <div className=\"images-table\">\r\n            {images[view].length === 0 ? (\r\n              <div className=\"no-items\">\r\n                <p>No Images to show in this Category</p>\r\n                <img src=\"image/notfound.svg\" alt=\"Not Found\" />\r\n              </div>\r\n            ) : (\r\n              images[view].map((img, index) => (\r\n                <React.Fragment key={index}>\r\n                  <div className=\"image-details\">\r\n                    <p onClick={() => handleImageClick(img.src)}>\r\n                      <strong>URL:</strong>{\" \"}\r\n                      <span className=\"image-url\">{img.src}</span>\r\n                    </p>\r\n                    <p>\r\n                      <strong>ALT:</strong> {img.alt}\r\n                    </p>\r\n                    <p>\r\n                      <strong>Description:</strong> {img.longDesc}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"image-preview\">\r\n                    {img.src !== \"No SRC\" ? (\r\n                      <img\r\n                        src={img.src}\r\n                        alt=\"Preview\"\r\n                        onClick={() => handleImageClick(img.src)}\r\n                      />\r\n                    ) : (\r\n                      <p>No SRC</p>\r\n                    )}\r\n                    <p>\r\n                      {img.width}x{img.height}\r\n                    </p>\r\n                  </div>\r\n                </React.Fragment>\r\n              ))\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Image;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Headers = () => {\r\n  const [headers, setHeaders] = useState([]);\r\n  const [headerCounts, setHeaderCounts] = useState({\r\n    h1: 0,\r\n    h2: 0,\r\n    h3: 0,\r\n    h4: 0,\r\n    h5: 0,\r\n    h6: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchHeaders = async () => {\r\n      const [tab] = await chrome.tabs.query({\r\n        active: true,\r\n        currentWindow: true,\r\n      });\r\n      const tabId = tab.id;\r\n\r\n      chrome.scripting.executeScript(\r\n        {\r\n          target: { tabId },\r\n          func: () => {\r\n            const headers = [];\r\n            const headerTags = Array.from(\r\n              document.querySelectorAll(\"h1, h2, h3, h4, h5, h6\")\r\n            );\r\n            headerTags.forEach((header) => {\r\n              headers.push({\r\n                tag: header.tagName.toLowerCase(),\r\n                text: header.textContent.trim(),\r\n              });\r\n            });\r\n            return headers;\r\n          },\r\n        },\r\n        ([result]) => {\r\n          const fetchedHeaders = result.result || [];\r\n          const counts = {\r\n            h1: fetchedHeaders.filter((h) => h.tag === \"h1\").length,\r\n            h2: fetchedHeaders.filter((h) => h.tag === \"h2\").length,\r\n            h3: fetchedHeaders.filter((h) => h.tag === \"h3\").length,\r\n            h4: fetchedHeaders.filter((h) => h.tag === \"h4\").length,\r\n            h5: fetchedHeaders.filter((h) => h.tag === \"h5\").length,\r\n            h6: fetchedHeaders.filter((h) => h.tag === \"h6\").length,\r\n          };\r\n\r\n          setHeaders(fetchedHeaders);\r\n          setHeaderCounts(counts);\r\n        }\r\n      );\r\n    };\r\n\r\n    fetchHeaders();\r\n  }, []);\r\n\r\n  const isEmpty = Object.values(headerCounts).every((count) => count === 0);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Headers</h2>\r\n      <div className=\"header-counts\">\r\n        {Object.keys(headerCounts).map((key) => (\r\n          <div className=\"header-item\" key={key}>\r\n            <span>{key.toUpperCase()}</span>\r\n            <span>{headerCounts[key] || 0}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {isEmpty ? (\r\n        <div className=\"no-items\" id=\"no-headers\">\r\n          <p>No Headers Found on this Website.</p>\r\n          <img src=\"image/notfound.svg\" alt=\"Not Found\" />\r\n        </div>\r\n      ) : (\r\n        <div className=\"header-structure\">\r\n          {headers.map((header, index) => (\r\n            <div key={index} className={`header-content header-${header.tag}`}>\r\n              <span className=\"dashed-line\"></span>\r\n              <strong>\r\n                <span className=\"header-tag\">{header.tag}</span>\r\n              </strong>\r\n              <span className=\"header-text\">{header.text}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Headers;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport \"./Schema.css\";\r\n\r\nconst SchemaViewer = () => {\r\n  const [schemas, setSchemas] = useState([]);\r\n  const [linkDistance, setLinkDistance] = useState(70);\r\n  const [fontSize, setFontSize] = useState(12);\r\n  const [nodeSize, setNodeSize] = useState(8);\r\n  const [isDragEnabled, setIsDragEnabled] = useState(true);\r\n  const graphRef = useRef(null);\r\n  const simulationRef = useRef(null); // Reference to the simulation\r\n\r\n  // Drag functionality\r\n  const drag = (simulation) => {\r\n    function dragstarted(event) {\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      event.subject.fx = event.subject.x;\r\n      event.subject.fy = event.subject.y;\r\n    }\r\n\r\n    function dragged(event) {\r\n      event.subject.fx = event.x;\r\n      event.subject.fy = event.y;\r\n    }\r\n\r\n    function dragended(event) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      event.subject.fx = null;\r\n      event.subject.fy = null;\r\n    }\r\n\r\n    return d3\r\n      .drag()\r\n      .on(\"start\", dragstarted)\r\n      .on(\"drag\", dragged)\r\n      .on(\"end\", dragended);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchSchemas = async () => {\r\n      const [tab] = await chrome.tabs.query({\r\n        active: true,\r\n        currentWindow: true,\r\n      });\r\n      const tabId = tab.id;\r\n\r\n      chrome.scripting.executeScript(\r\n        {\r\n          target: { tabId },\r\n          func: () => {\r\n            const schemaScripts = Array.from(\r\n              document.querySelectorAll('script[type=\"application/ld+json\"]')\r\n            );\r\n            return schemaScripts\r\n              .map((script) => {\r\n                try {\r\n                  return JSON.parse(script.innerText);\r\n                } catch {\r\n                  return null;\r\n                }\r\n              })\r\n              .filter(Boolean);\r\n          },\r\n        },\r\n        ([result]) => {\r\n          setSchemas(result.result || []);\r\n        }\r\n      );\r\n    };\r\n\r\n    fetchSchemas();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (schemas.length > 0) {\r\n      const graphData = buildGraphData(schemas);\r\n      renderGraph(graphData);\r\n    }\r\n  }, [schemas]);\r\n\r\n  useEffect(() => {\r\n    updateLinkDistance();\r\n  }, [linkDistance]);\r\n\r\n  useEffect(() => {\r\n    updateFontSize();\r\n  }, [fontSize]);\r\n\r\n  useEffect(() => {\r\n    updateNodeSize();\r\n  }, [nodeSize]);\r\n\r\n  useEffect(() => {\r\n    if (simulationRef.current && graphRef.current) {\r\n      const nodes = d3.select(graphRef.current).selectAll(\"circle\");\r\n      if (isDragEnabled) {\r\n        nodes.call(drag(simulationRef.current));\r\n      } else {\r\n        nodes.on(\".drag\", null); // Disable drag\r\n      }\r\n    }\r\n  }, [isDragEnabled]);\r\n\r\n  const buildGraphData = (schemas) => {\r\n    const nodes = [];\r\n    const links = [];\r\n    const rootNode = { id: 0, name: \"Schema\" };\r\n    nodes.push(rootNode);\r\n\r\n    let nodeId = 1;\r\n\r\n    const traverse = (data, parentId = 0, linkName = \"\") => {\r\n      if (typeof data === \"object\" && data !== null) {\r\n        const currentId = nodeId++;\r\n        nodes.push({\r\n          id: currentId,\r\n          name: data[\"@type\"] || \"Object\",\r\n        });\r\n\r\n        links.push({\r\n          source: parentId,\r\n          target: currentId,\r\n          linkName: linkName,\r\n        });\r\n\r\n        Object.entries(data).forEach(([key, value]) => {\r\n          if (key !== \"@type\") {\r\n            traverse(value, currentId, key);\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    schemas.forEach((schema) => traverse(schema));\r\n    return { nodes, links };\r\n  };\r\n\r\n  const renderGraph = ({ nodes, links }) => {\r\n    const width = 1000;\r\n    const height = 1000;\r\n\r\n    d3.select(graphRef.current).selectAll(\"*\").remove();\r\n    const svg = d3\r\n      .select(graphRef.current)\r\n      .append(\"svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .call(\r\n        d3\r\n          .zoom()\r\n          .scaleExtent([0.01, 5])\r\n          .on(\"zoom\", (event) => {\r\n            graphGroup.attr(\"transform\", event.transform);\r\n          })\r\n      );\r\n\r\n    const graphGroup = svg.append(\"g\");\r\n\r\n    svg\r\n      .append(\"defs\")\r\n      .append(\"marker\")\r\n      .attr(\"id\", \"arrow\")\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 25)\r\n      .attr(\"refY\", 0)\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .attr(\"orient\", \"auto\")\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#aaa\");\r\n\r\n    simulationRef.current = d3\r\n      .forceSimulation(nodes)\r\n      .force(\r\n        \"link\",\r\n        d3\r\n          .forceLink(links)\r\n          .id((d) => d.id)\r\n          .distance(linkDistance)\r\n      )\r\n      .force(\"charge\", d3.forceManyBody().strength(-300))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2));\r\n\r\n    const link = graphGroup\r\n      .append(\"g\")\r\n      .attr(\"stroke\", \"#aaa\")\r\n      .attr(\"stroke-width\", 2)\r\n      .selectAll(\"line\")\r\n      .data(links)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"marker-end\", \"url(#arrow)\");\r\n\r\n    const linkLabel = graphGroup\r\n      .append(\"g\")\r\n      .selectAll(\"text\")\r\n      .data(links)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"font-size\", `${fontSize * 0.8}px`)\r\n      .attr(\"dy\", 5)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .text((d) => d.linkName);\r\n\r\n    const node = graphGroup\r\n      .append(\"g\")\r\n      .attr(\"stroke\", \"#fff\")\r\n      .attr(\"stroke-width\", 1.5)\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", nodeSize)\r\n      .attr(\"fill\", (d) => d3.schemeCategory10[d.id % 10])\r\n      .call(isDragEnabled ? drag(simulationRef.current) : () => {});\r\n\r\n    const label = graphGroup\r\n      .append(\"g\")\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"dy\", -10)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .text((d) => d.name)\r\n      .style(\"font-size\", `${fontSize}px`)\r\n      .style(\"font-weight\", \"bold\");\r\n\r\n    simulationRef.current.on(\"tick\", () => {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n\r\n      linkLabel\r\n        .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\r\n        .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\r\n\r\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n    });\r\n  };\r\n\r\n  const updateLinkDistance = () => {\r\n    if (simulationRef.current) {\r\n      const linkForce = simulationRef.current.force(\"link\");\r\n      if (linkForce) {\r\n        linkForce.distance(linkDistance);\r\n        simulationRef.current.alpha(1).restart();\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateFontSize = () => {\r\n    d3.select(graphRef.current)\r\n      .selectAll(\"text\")\r\n      .style(\"font-size\", `${fontSize}px`);\r\n  };\r\n\r\n  const updateNodeSize = () => {\r\n    d3.select(graphRef.current).selectAll(\"circle\").attr(\"r\", nodeSize);\r\n  };\r\n\r\n  const downloadGraphAsPng = () => {\r\n    const svgElement = graphRef.current.querySelector(\"svg\");\r\n    const clonedSvg = svgElement.cloneNode(true);\r\n    const bbox = svgElement.getBBox();\r\n    const padding = 0;\r\n    const width = bbox.width + padding * 2;\r\n    const height = bbox.height + padding * 2;\r\n    clonedSvg.setAttribute(\r\n      \"viewBox\",\r\n      `${bbox.x - padding} ${bbox.y - padding} ${width} ${height}`\r\n    );\r\n    clonedSvg.setAttribute(\"width\", width);\r\n    clonedSvg.setAttribute(\"height\", height);\r\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\r\n    rect.setAttribute(\"x\", bbox.x - padding);\r\n    rect.setAttribute(\"y\", bbox.y - padding);\r\n    rect.setAttribute(\"width\", width);\r\n    rect.setAttribute(\"height\", height);\r\n    rect.setAttribute(\"fill\", \"white\");\r\n    clonedSvg.insertBefore(rect, clonedSvg.firstChild);\r\n    const serializer = new XMLSerializer();\r\n    const svgString = serializer.serializeToString(clonedSvg);\r\n    const blob = new Blob([svgString], { type: \"image/svg+xml;charset=utf-8\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      const canvas = document.createElement(\"canvas\");\r\n      const scaleFactor = 4;\r\n      canvas.width = width * scaleFactor;\r\n      canvas.height = height * scaleFactor;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.fillStyle = \"white\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      ctx.drawImage(\r\n        img,\r\n        padding * scaleFactor,\r\n        padding * scaleFactor,\r\n        width * scaleFactor,\r\n        height * scaleFactor\r\n      );\r\n      const link = document.createElement(\"a\");\r\n      link.download = \"schema-graph.png\";\r\n      link.href = canvas.toDataURL(\"image/png\");\r\n      link.click();\r\n      URL.revokeObjectURL(url);\r\n    };\r\n    img.src = url;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h2>Schema Visualizer</h2>\r\n        <button\r\n          onClick={() => setIsDragEnabled((prev) => !prev)}\r\n          id=\"pause-play\"\r\n        >\r\n          {isDragEnabled ? (\r\n            <img src=\"image/pause.svg\" alt=\"Pause button\" />\r\n          ) : (\r\n            <img src=\"image/play.svg\" alt=\"Play button\" />\r\n          )}\r\n        </button>\r\n        <button onClick={downloadGraphAsPng} id=\"download-btn\">\r\n          <img src=\"image/download.svg\" alt=\"Download Graph\" />\r\n        </button>\r\n\r\n        <div className=\"controls\">\r\n          <div className=\"control-item\">\r\n            <label>Font Size</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"8\"\r\n              max=\"30\"\r\n              value={fontSize}\r\n              onChange={(e) => setFontSize(Number(e.target.value))}\r\n            />\r\n            <span>{fontSize}</span>\r\n          </div>\r\n          <div className=\"control-item\">\r\n            <label>Node Size</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"5\"\r\n              max=\"50\"\r\n              value={nodeSize}\r\n              onChange={(e) => setNodeSize(Number(e.target.value))}\r\n            />\r\n            <span>{nodeSize}</span>\r\n          </div>\r\n          <div className=\"control-item\">\r\n            <label>Link Distance</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"20\"\r\n              max=\"200\"\r\n              value={linkDistance}\r\n              onChange={(e) => setLinkDistance(Number(e.target.value))}\r\n            />\r\n            <span>{linkDistance}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {schemas.length > 0 ? (\r\n        <div ref={graphRef} className=\"graph-container\"></div>\r\n      ) : (\r\n        <div className=\"no-items\">\r\n          <p>No Schema Found on this Website.</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SchemaViewer;\r\n\r\n// Using D3 With Scrollers with Single Root Nodec without tooltip.\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import * as d3 from \"d3\";\r\n// import \"./Schema.css\";\r\n\r\n// const SchemaViewer = () => {\r\n//   const [schemas, setSchemas] = useState([]);\r\n//   const [linkDistance, setLinkDistance] = useState(70);\r\n//   const [fontSize, setFontSize] = useState(12);\r\n//   const [nodeSize, setNodeSize] = useState(8);\r\n//   const [isDragEnabled, setIsDragEnabled] = useState(true);\r\n//   const graphRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSchemas = async () => {\r\n//       const [tab] = await chrome.tabs.query({\r\n//         active: true,\r\n//         currentWindow: true,\r\n//       });\r\n//       const tabId = tab.id;\r\n\r\n//       chrome.scripting.executeScript(\r\n//         {\r\n//           target: { tabId },\r\n//           func: () => {\r\n//             const schemaScripts = Array.from(\r\n//               document.querySelectorAll('script[type=\"application/ld+json\"]')\r\n//             );\r\n//             return schemaScripts\r\n//               .map((script) => {\r\n//                 try {\r\n//                   return JSON.parse(script.innerText);\r\n//                 } catch {\r\n//                   return null;\r\n//                 }\r\n//               })\r\n//               .filter(Boolean);\r\n//           },\r\n//         },\r\n//         ([result]) => {\r\n//           setSchemas(result.result || []);\r\n//         }\r\n//       );\r\n//     };\r\n\r\n//     fetchSchemas();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (schemas.length > 0) {\r\n//       const graphData = buildGraphData(schemas);\r\n//       renderGraph(graphData);\r\n//     }\r\n//   }, [schemas, linkDistance, fontSize, nodeSize, isDragEnabled]);\r\n\r\n//   const buildGraphData = (schemas) => {\r\n//     const nodes = [];\r\n//     const links = [];\r\n//     const rootNode = { id: 0, name: \"Schema\" };\r\n//     nodes.push(rootNode);\r\n\r\n//     let nodeId = 1;\r\n\r\n//     const traverse = (data, parentId = 0, linkName = \"\") => {\r\n//       if (typeof data === \"object\" && data !== null) {\r\n//         const currentId = nodeId++;\r\n//         nodes.push({\r\n//           id: currentId,\r\n//           name: data[\"@type\"] || \"Object\",\r\n//         });\r\n\r\n//         links.push({\r\n//           source: parentId,\r\n//           target: currentId,\r\n//           linkName: linkName,\r\n//         });\r\n\r\n//         Object.entries(data).forEach(([key, value]) => {\r\n//           if (key !== \"@type\") {\r\n//             traverse(value, currentId, key);\r\n//           }\r\n//         });\r\n//       }\r\n//     };\r\n\r\n//     schemas.forEach((schema) => traverse(schema));\r\n//     return { nodes, links };\r\n//   };\r\n\r\n//   const renderGraph = ({ nodes, links }) => {\r\n//     const width = 1000;\r\n//     const height = 1000;\r\n\r\n//     d3.select(graphRef.current).selectAll(\"*\").remove();\r\n//     const svg = d3\r\n//       .select(graphRef.current)\r\n//       .append(\"svg\")\r\n//       .attr(\"width\", width)\r\n//       .attr(\"height\", height)\r\n//       .call(\r\n//         d3\r\n//           .zoom()\r\n//           .scaleExtent([0.01, 5])\r\n//           .on(\"zoom\", (event) => {\r\n//             graphGroup.attr(\"transform\", event.transform);\r\n//           })\r\n//       );\r\n\r\n//     const graphGroup = svg.append(\"g\");\r\n\r\n//     svg\r\n//       .append(\"defs\")\r\n//       .append(\"marker\")\r\n//       .attr(\"id\", \"arrow\")\r\n//       .attr(\"viewBox\", \"0 -5 10 10\")\r\n//       .attr(\"refX\", 25)\r\n//       .attr(\"refY\", 0)\r\n//       .attr(\"markerWidth\", 6)\r\n//       .attr(\"markerHeight\", 6)\r\n//       .attr(\"orient\", \"auto\")\r\n//       .append(\"path\")\r\n//       .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n//       .attr(\"fill\", \"#aaa\");\r\n\r\n//     const simulation = d3\r\n//       .forceSimulation(nodes)\r\n//       .force(\r\n//         \"link\",\r\n//         d3\r\n//           .forceLink(links)\r\n//           .id((d) => d.id)\r\n//           .distance(linkDistance)\r\n//       )\r\n//       .force(\"charge\", d3.forceManyBody().strength(-300))\r\n//       .force(\"center\", d3.forceCenter(width / 2, height / 2));\r\n\r\n//     const link = graphGroup\r\n//       .append(\"g\")\r\n//       .attr(\"stroke\", \"#aaa\")\r\n//       .attr(\"stroke-width\", 2)\r\n//       .selectAll(\"line\")\r\n//       .data(links)\r\n//       .enter()\r\n//       .append(\"line\")\r\n//       .attr(\"marker-end\", \"url(#arrow)\");\r\n\r\n//     const linkLabel = graphGroup\r\n//       .append(\"g\")\r\n//       .selectAll(\"text\")\r\n//       .data(links)\r\n//       .enter()\r\n//       .append(\"text\")\r\n//       .attr(\"font-size\", `${fontSize * 0.8}px`)\r\n//       .attr(\"dy\", 5)\r\n//       .attr(\"text-anchor\", \"middle\")\r\n//       .text((d) => d.linkName);\r\n\r\n//     const node = graphGroup\r\n//       .append(\"g\")\r\n//       .attr(\"stroke\", \"#fff\")\r\n//       .attr(\"stroke-width\", 1.5)\r\n//       .selectAll(\"circle\")\r\n//       .data(nodes)\r\n//       .enter()\r\n//       .append(\"circle\")\r\n//       .attr(\"r\", nodeSize)\r\n//       .attr(\"fill\", (d) => d3.schemeCategory10[d.id % 10])\r\n//       .call(isDragEnabled ? drag(simulation) : () => {});\r\n\r\n//     const label = graphGroup\r\n//       .append(\"g\")\r\n//       .selectAll(\"text\")\r\n//       .data(nodes)\r\n//       .enter()\r\n//       .append(\"text\")\r\n//       .attr(\"dy\", -10)\r\n//       .attr(\"text-anchor\", \"middle\")\r\n//       .text((d) => d.name)\r\n//       .style(\"font-size\", `${fontSize}px`)\r\n//       .style(\"font-weight\", \"bold\");\r\n\r\n//     simulation.on(\"tick\", () => {\r\n//       link\r\n//         .attr(\"x1\", (d) => d.source.x)\r\n//         .attr(\"y1\", (d) => d.source.y)\r\n//         .attr(\"x2\", (d) => d.target.x)\r\n//         .attr(\"y2\", (d) => d.target.y);\r\n\r\n//       linkLabel\r\n//         .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\r\n//         .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\r\n\r\n//       node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n//       label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n//     });\r\n\r\n//     function drag(simulation) {\r\n//       function dragstarted(event) {\r\n//         if (!event.active) simulation.alphaTarget(0.3).restart();\r\n//         event.subject.fx = event.subject.x;\r\n//         event.subject.fy = event.subject.y;\r\n//       }\r\n\r\n//       function dragged(event) {\r\n//         event.subject.fx = event.x;\r\n//         event.subject.fy = event.y;\r\n//       }\r\n\r\n//       function dragended(event) {\r\n//         if (!event.active) simulation.alphaTarget(0);\r\n//         event.subject.fx = null;\r\n//         event.subject.fy = null;\r\n//       }\r\n\r\n//       return d3\r\n//         .drag()\r\n//         .on(\"start\", dragstarted)\r\n//         .on(\"drag\", dragged)\r\n//         .on(\"end\", dragended);\r\n//     }\r\n//   };\r\n\r\n//   const downloadGraphAsPng = () => {\r\n//     const svgElement = graphRef.current.querySelector(\"svg\");\r\n//     const clonedSvg = svgElement.cloneNode(true);\r\n//     const bbox = svgElement.getBBox();\r\n//     const padding = 0;\r\n//     const width = bbox.width + padding * 2;\r\n//     const height = bbox.height + padding * 2;\r\n//     clonedSvg.setAttribute(\r\n//       \"viewBox\",\r\n//       `${bbox.x - padding} ${bbox.y - padding} ${width} ${height}`\r\n//     );\r\n//     clonedSvg.setAttribute(\"width\", width);\r\n//     clonedSvg.setAttribute(\"height\", height);\r\n//     const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\r\n//     rect.setAttribute(\"x\", bbox.x - padding);\r\n//     rect.setAttribute(\"y\", bbox.y - padding);\r\n//     rect.setAttribute(\"width\", width);\r\n//     rect.setAttribute(\"height\", height);\r\n//     rect.setAttribute(\"fill\", \"white\");\r\n//     clonedSvg.insertBefore(rect, clonedSvg.firstChild);\r\n//     const serializer = new XMLSerializer();\r\n//     const svgString = serializer.serializeToString(clonedSvg);\r\n//     const blob = new Blob([svgString], { type: \"image/svg+xml;charset=utf-8\" });\r\n//     const url = URL.createObjectURL(blob);\r\n//     const img = new Image();\r\n//     img.onload = () => {\r\n//       const canvas = document.createElement(\"canvas\");\r\n//       const scaleFactor = 4;\r\n//       canvas.width = width * scaleFactor;\r\n//       canvas.height = height * scaleFactor;\r\n//       const ctx = canvas.getContext(\"2d\");\r\n//       ctx.fillStyle = \"white\";\r\n//       ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n//       ctx.drawImage(\r\n//         img,\r\n//         padding * scaleFactor,\r\n//         padding * scaleFactor,\r\n//         width * scaleFactor,\r\n//         height * scaleFactor\r\n//       );\r\n//       const link = document.createElement(\"a\");\r\n//       link.download = \"schema-graph.png\";\r\n//       link.href = canvas.toDataURL(\"image/png\");\r\n//       link.click();\r\n//       URL.revokeObjectURL(url);\r\n//     };\r\n//     img.src = url;\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"container\">\r\n//         <h2>Schema Visualizer</h2>\r\n//         <button\r\n//           onClick={() => setIsDragEnabled((prev) => !prev)}\r\n//           id=\"pause-play\"\r\n//         >\r\n//           {isDragEnabled ? (\r\n//             <img src=\"image/pause.svg\" alt=\"Pause button\" />\r\n//           ) : (\r\n//             <img src=\"image/play.svg\" alt=\"Play button\" />\r\n//           )}\r\n//         </button>\r\n//         <button onClick={downloadGraphAsPng} id=\"download-btn\">\r\n//           <img src=\"image/download.svg\" alt=\"Download Graph\" />\r\n//         </button>\r\n//         <div className=\"controls\">\r\n//           <div className=\"control-item\">\r\n//             <label>Font Size</label>\r\n//             <input\r\n//               type=\"range\"\r\n//               min=\"8\"\r\n//               max=\"30\"\r\n//               value={fontSize}\r\n//               onChange={(e) => setFontSize(Number(e.target.value))}\r\n//             />\r\n//             <span>{fontSize}</span>\r\n//           </div>\r\n//           <div className=\"control-item\">\r\n//             <label>Node Size</label>\r\n//             <input\r\n//               type=\"range\"\r\n//               min=\"5\"\r\n//               max=\"20\"\r\n//               value={nodeSize}\r\n//               onChange={(e) => setNodeSize(Number(e.target.value))}\r\n//             />\r\n//             <span>{nodeSize}</span>\r\n//           </div>\r\n//           <div className=\"control-item\">\r\n//             <label>Link Distance</label>\r\n//             <input\r\n//               type=\"range\"\r\n//               min=\"20\"\r\n//               max=\"200\"\r\n//               value={linkDistance}\r\n//               onChange={(e) => setLinkDistance(Number(e.target.value))}\r\n//             />\r\n//             <span>{linkDistance}</span>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {schemas.length > 0 ? (\r\n//         <div ref={graphRef} className=\"graph-container\"></div>\r\n//       ) : (\r\n//         <div className=\"no-items\">\r\n//           <p>No Schema Found on this Website.</p>\r\n//           <img src=\"image/notfound.svg\" alt=\"Not Found\" />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SchemaViewer;\r\n\r\n// Without D3 Framework.\r\n// import React, { useEffect, useState } from \"react\";\r\n// import \"./Schema.css\";\r\n\r\n// const SchemaViewer = () => {\r\n//   const [schemas, setSchemas] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSchemas = async () => {\r\n//       const [tab] = await chrome.tabs.query({\r\n//         active: true,\r\n//         currentWindow: true,\r\n//       });\r\n//       const tabId = tab.id;\r\n\r\n//       chrome.scripting.executeScript(\r\n//         {\r\n//           target: { tabId },\r\n//           func: () => {\r\n//             const schemaScripts = Array.from(\r\n//               document.querySelectorAll('script[type=\"application/ld+json\"]')\r\n//             );\r\n//             return schemaScripts\r\n//               .map((script) => {\r\n//                 try {\r\n//                   return JSON.parse(script.innerText);\r\n//                 } catch {\r\n//                   return null;\r\n//                 }\r\n//               })\r\n//               .filter(Boolean);\r\n//           },\r\n//         },\r\n//         ([result]) => {\r\n//           setSchemas(result.result || []);\r\n//         }\r\n//       );\r\n//     };\r\n\r\n//     fetchSchemas();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Schema</h2>\r\n//       <p className=\"schema-description\">\r\n//         <strong>\r\n//           Schema Markup is a semantic vocabulary of tags that helps search\r\n//           engines understand your webpage and better represent it in the search\r\n//           results.\r\n//         </strong>\r\n//       </p>\r\n//       <div className=\"schema-container\">\r\n//         {schemas.length > 0 ? (\r\n//           schemas.map((schema, index) => (\r\n//             <SchemaItem\r\n//               key={index}\r\n//               data={schema}\r\n//               title={schema[\"@type\"] || `Schema ${index + 1}`}\r\n//             />\r\n//           ))\r\n//         ) : (\r\n//           <div className=\"no-items\" id=\"no-schema\">\r\n//             <p>No Schema Found on this Website.</p>\r\n//             <img src=\"notfound.svg\" alt=\"Not Found\" />\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const SchemaItem = ({ data, title }) => {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n\r\n//   const toggleOpen = () => setIsOpen(!isOpen);\r\n\r\n//   const renderValue = (key, value) => {\r\n//     if (typeof value === \"object\" && value !== null) {\r\n//       return <SchemaItem data={value} title={value[\"@type\"] || key} />;\r\n//     }\r\n//     return (\r\n//       <div className=\"schema-value\">\r\n//         <strong>{key}:</strong> {value}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"schema-item\">\r\n//       <div className=\"schema-header\" onClick={toggleOpen}>\r\n//         <span>{title}</span>\r\n//         <button>{isOpen ? \"▲\" : \"▼\"}</button>\r\n//       </div>\r\n//       {isOpen && (\r\n//         <div className=\"schema-content\">\r\n//           {Object.entries(data).map(([key, value], index) => (\r\n//             <div key={index} className=\"schema-entry\">\r\n//               {renderValue(key, value)}\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SchemaViewer;\r\n","import React, { useState } from \"react\";\r\nimport \"./PageSpeed.css\";\r\n\r\nconst PageSpeedTest = () => {\r\n  const [url, setUrl] = useState(\"\");\r\n  const [desktopResult, setDesktopResult] = useState(null);\r\n  const [mobileResult, setMobileResult] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const getActiveTabUrl = async () => {\r\n    const [tab] = await chrome.tabs.query({\r\n      active: true,\r\n      currentWindow: true,\r\n    });\r\n    return tab.url;\r\n  };\r\n\r\n  const API_KEY = \"AIzaSyCdskX2l4jTGn8RXH9zjDqnV31aHdhxTEU\";\r\n\r\n  const fetchPageSpeedData = async (url, strategy) => {\r\n    const endpoint = `https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=${url}&strategy=${strategy}&key=${API_KEY}`;\r\n    const response = await fetch(endpoint);\r\n    if (!response.ok) throw new Error(\"Failed to fetch PageSpeed data\");\r\n    return response.json();\r\n  };\r\n\r\n  const runTest = async () => {\r\n    setError(\"\");\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const activeUrl = await getActiveTabUrl();\r\n      setUrl(activeUrl);\r\n\r\n      const [desktop, mobile] = await Promise.all([\r\n        fetchPageSpeedData(activeUrl, \"desktop\"),\r\n        fetchPageSpeedData(activeUrl, \"mobile\"),\r\n      ]);\r\n\r\n      setDesktopResult(desktop.lighthouseResult);\r\n      setMobileResult(mobile.lighthouseResult);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const getScoreColor = (score) => {\r\n    if (score >= 85) return \"#4caf50\";\r\n    if (score >= 50) return \"#ffc107\";\r\n    return \"#f44336\";\r\n  };\r\n\r\n  const renderMetrics = (result) => {\r\n    const audits = result.audits;\r\n    return (\r\n      <div className=\"metrics\">\r\n        <p>\r\n          <strong>First Contentful Paint:</strong>{\" \"}\r\n          {audits[\"first-contentful-paint\"].displayValue}\r\n        </p>\r\n        <p>\r\n          <strong>Largest Contentful Paint:</strong>{\" \"}\r\n          {audits[\"largest-contentful-paint\"].displayValue}\r\n        </p>\r\n        <p>\r\n          <strong>Total Blocking Time:</strong>{\" \"}\r\n          {audits[\"total-blocking-time\"].displayValue}\r\n        </p>\r\n        <p>\r\n          <strong>Cumulative Layout Shift:</strong>{\" \"}\r\n          {audits[\"cumulative-layout-shift\"].displayValue}\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderScoreCard = (result, strategy) => {\r\n    const score = result.categories.performance.score * 100;\r\n    const scoreColor = getScoreColor(score);\r\n\r\n    return (\r\n      <div className=\"score-card\">\r\n        <div\r\n          className=\"score-circle\"\r\n          style={{\r\n            backgroundColor: `white`,\r\n            backgroundImage: `conic-gradient(${scoreColor} ${score}%, #f3f3f3 ${score}%)`,\r\n          }}\r\n        >\r\n          <span>{score}</span>\r\n        </div>\r\n        <p className=\"circle-label\">{strategy} PageSpeed</p>\r\n        <p className=\"url-text\">\r\n          Google PageSpeed Insights for <br />{\" \"}\r\n          <span className=\"url\">{url}</span>\r\n        </p>\r\n        {renderMetrics(result)}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"pagespeed-container\">\r\n      <h2>Page Speed Test</h2>\r\n      <button onClick={runTest} disabled={isLoading}>\r\n        {isLoading ? \"Running Test...\" : \"Run Speed Test\"}\r\n      </button>\r\n      {isLoading && (\r\n        <div className=\"active-tab-container\">\r\n          <p>It Might Take a While to Process</p>\r\n          <img src=\"image/loading.gif\" alt=\"Loading\" className=\"loading\" />\r\n        </div>\r\n      )}\r\n      {error && <p className=\"error\">{error}</p>}\r\n\r\n      <div className=\"score-container\">\r\n        {mobileResult && renderScoreCard(mobileResult, \"Mobile\")}\r\n        {desktopResult && renderScoreCard(desktopResult, \"Desktop\")}\r\n      </div>\r\n\r\n      {desktopResult && mobileResult && (\r\n        <div className=\"legend\">\r\n          <div>\r\n            <span className=\"legend-color green\"></span>\r\n            <strong>Good</strong>\r\n          </div>\r\n          <div>\r\n            <span className=\"legend-color yellow\"></span>\r\n            <strong>Can Be Better</strong>\r\n          </div>\r\n          <div>\r\n            <span className=\"legend-color red\"></span>\r\n            <strong>Need to Be Updated</strong>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageSpeedTest;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-content\">\r\n        <p className=\"footer-text\">\r\n          For better results, visualization, and automated SEO audit\r\n          <br /> of your website, visit Digispot-AI.\r\n        </p>\r\n        <button\r\n          className=\"footer-button\"\r\n          onClick={() => window.open(\"https://digispot.ai\")}\r\n        >\r\n          Digispot-AI\r\n        </button>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Download.css\";\r\nimport { fetchWebsiteInfo } from \"../../tabs/utils/fetchWebsiteInfo\";\r\n\r\nconst DownloadPdf = () => {\r\n  const [info, setInfo] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const getInfo = async () => {\r\n      try {\r\n        const data = await fetchWebsiteInfo();\r\n        setInfo(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching website info:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getInfo();\r\n  }, []);\r\n\r\n  // Function to download the data as PDF\r\n  const downloadPdf = async () => {\r\n    const jsPDF = (await import(\"jspdf\")).jsPDF;\r\n    const doc = new jsPDF();\r\n    doc.setFontSize(16);\r\n    doc.text(\"Website Summary Report\", 105, 10, { align: \"center\" });\r\n    const summaryData = [\r\n      { label: \"Title\", value: info.title },\r\n      { label: \"Description\", value: info.description },\r\n      { label: \"Canonical\", value: info.canonical },\r\n      { label: \"URL\", value: info.url },\r\n      { label: \"Language\", value: info.lang },\r\n      { label: \"Robots Meta\", value: info.robots },\r\n      { label: \"X-Robots Meta\", value: info.xRobots },\r\n    ];\r\n    let yPosition = 20;\r\n    summaryData.forEach((item) => {\r\n      if (yPosition > 280) {\r\n        doc.addPage();\r\n        yPosition = 10;\r\n      }\r\n      doc.setFontSize(12);\r\n      doc.text(`${item.label}`, 10, yPosition);\r\n      doc.text(\":\", 40, yPosition);\r\n      doc.setFontSize(10);\r\n      const pageWidth = 140;\r\n      const wrappedText = doc.splitTextToSize(\r\n        item.value || \"Not Available\",\r\n        pageWidth\r\n      );\r\n\r\n      wrappedText.forEach((line) => {\r\n        if (yPosition > 280) {\r\n          doc.addPage();\r\n          yPosition = 10;\r\n        }\r\n        doc.text(line, 45, yPosition);\r\n        yPosition += 7;\r\n      });\r\n    });\r\n    doc.save(`${info.title}` + \" website-summary.pdf\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tabs\" id=\"downloadpdf\">\r\n      <button className=\"tab-button\" onClick={downloadPdf} id=\"downloadbutton\">\r\n        Download as PDF\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DownloadPdf;\r\n","import React, { useState } from \"react\";\r\nimport TabNavigation from \"./components/navigator/TabNavigation\";\r\nimport Summary from \"./tabs/summary/Summary\";\r\nimport Links from \"./tabs/links/Links\";\r\nimport Images from \"./tabs/imagestab/Images\";\r\nimport Header from \"./tabs/header/Header\";\r\nimport Schema from \"./tabs/schema/Schema\";\r\nimport PageSpeedTest from \"./tabs/pagespeed/PageSpeed\";\r\nimport Footer from \"./components/footer/Footer\";\r\nimport DownloadPdf from \"./components/downloadpdf/Downloadpdf\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [activeTab, setActiveTab] = useState(\"summary\");\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <TabNavigation activeTab={activeTab} setActiveTab={setActiveTab} />\r\n      <DownloadPdf />\r\n      <div className=\"app-content\">\r\n        {activeTab === \"summary\" && <Summary />}\r\n        {activeTab === \"links\" && <Links />}\r\n        {activeTab === \"images\" && <Images />}\r\n        {activeTab === \"headers\" && <Header />}\r\n        {activeTab === \"schema\" && <Schema />}\r\n        {activeTab === \"pagespeedtest\" && <PageSpeedTest />}\r\n      </div>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import TabNavigation from \"./components/navigator/TabNavigation\";\r\n// import Summary from \"./tabs/summary/Summary\";\r\n// import Links from \"./tabs/links/Links\";\r\n// import Images from \"./tabs/imagestab/Images\";\r\n// import Header from \"./tabs/header/Header\";\r\n// import Schema from \"./tabs/schema/Schema\";\r\n// import PageSpeedTest from \"./tabs/pagespeed/PageSpeed\";\r\n// import Footer from \"./components/footer/Footer\";\r\n// import \"./App.css\";\r\n\r\n// const App = () => {\r\n//   const [activeTab, setActiveTab] = useState(\"summary\");\r\n\r\n//   // State to track all tabs data\r\n//   const [tabData, setTabData] = useState({\r\n//     summary: null,\r\n//     links: null,\r\n//     images: null,\r\n//     headers: null,\r\n//     schema: null,\r\n//     pagespeedtest: null,\r\n//   });\r\n\r\n//   // Load data from chrome.storage when the app is initialized\r\n//   useEffect(() => {\r\n//     chrome.storage.local.get(null, (data) => {\r\n//       setTabData((prev) => ({ ...prev, ...data }));\r\n//     });\r\n//   }, []);\r\n\r\n//   // Save activeTab data to chrome.storage\r\n//   const saveTabData = (tabName, data) => {\r\n//     setTabData((prev) => ({ ...prev, [tabName]: data }));\r\n//     chrome.storage.local.set({ [tabName]: data });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app-container\">\r\n//       <TabNavigation activeTab={activeTab} setActiveTab={setActiveTab} />\r\n\r\n//       <div className=\"app-content\">\r\n//         {activeTab === \"summary\" && (\r\n//           <Summary\r\n//             data={tabData.summary}\r\n//             saveData={(data) => saveTabData(\"summary\", data)}\r\n//           />\r\n//         )}\r\n//         {activeTab === \"links\" && (\r\n//           <Links\r\n//             data={tabData.links}\r\n//             saveData={(data) => saveTabData(\"links\", data)}\r\n//           />\r\n//         )}\r\n//         {activeTab === \"images\" && (\r\n//           <Images\r\n//             data={tabData.images}\r\n//             saveData={(data) => saveTabData(\"images\", data)}\r\n//           />\r\n//         )}\r\n//         {activeTab === \"headers\" && (\r\n//           <Header\r\n//             data={tabData.headers}\r\n//             saveData={(data) => saveTabData(\"headers\", data)}\r\n//           />\r\n//         )}\r\n//         {activeTab === \"schema\" && (\r\n//           <Schema\r\n//             data={tabData.schema}\r\n//             saveData={(data) => saveTabData(\"schema\", data)}\r\n//           />\r\n//         )}\r\n//         {activeTab === \"pagespeedtest\" && (\r\n//           <PageSpeedTest\r\n//             data={tabData.pagespeedtest}\r\n//             saveData={(data) => saveTabData(\"pagespeedtest\", data)}\r\n//           />\r\n//         )}\r\n//       </div>\r\n\r\n//       <Footer />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport App from \"./App\";\r\n// import \"./styles.css\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<App />);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// The chunk loading function for additional chunks\n// Since all referenced chunks are already included\n// in this file, this function is empty here.\n__webpack_require__.e = () => (Promise.resolve());","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t887: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwebsite_info_crawler\"] = self[\"webpackChunkwebsite_info_crawler\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(2144)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","_ref","activeTab","setActiveTab","React","className","onClick","fetchWebsiteInfo","async","tab","chrome","tabs","query","active","currentWindow","tabId","id","Promise","resolve","reject","scripting","executeScript","target","func","robotsMeta","document","querySelector","content","xRobotsMeta","lang","documentElement","title","description","canonical","href","robots","xRobots","url","window","location","result","Error","Summary","info","setInfo","useState","loading","setLoading","useEffect","data","error","console","getInfo","src","alt","open","Links","links","setLinks","view","setView","Array","from","querySelectorAll","map","a","textContent","trim","filter","link","origin","internal","startsWith","external","unique","Set","find","total","fetchLinks","length","exportToCSV","csvRows","push","forEach","_ref2","csvContent","join","blob","Blob","type","URL","createObjectURL","createElement","download","click","revokeObjectURL","index","key","rel","l","Image","images","setImages","noAlt","noLongDesc","noSrc","img","longDesc","longdesc","width","naturalWidth","height","naturalHeight","fetchImages","handleImageClick","imgSrc","newTab","body","innerHTML","split","pop","exportCSV","csvData","Headers","headers","setHeaders","headerCounts","setHeaderCounts","h1","h2","h3","h4","h5","h6","header","tag","tagName","toLowerCase","text","fetchedHeaders","counts","h","fetchHeaders","isEmpty","Object","values","every","count","keys","toUpperCase","SchemaViewer","schemas","setSchemas","linkDistance","setLinkDistance","fontSize","setFontSize","nodeSize","setNodeSize","isDragEnabled","setIsDragEnabled","graphRef","useRef","simulationRef","drag","simulation","d3","on","event","alphaTarget","restart","subject","fx","x","fy","y","script","JSON","parse","innerText","Boolean","fetchSchemas","graphData","buildGraphData","renderGraph","updateLinkDistance","updateFontSize","updateNodeSize","current","nodes","selectAll","call","name","nodeId","traverse","parentId","arguments","undefined","linkName","currentId","source","entries","value","schema","_ref3","remove","svg","append","attr","scaleExtent","graphGroup","transform","force","d","distance","strength","enter","linkLabel","node","label","style","linkForce","alpha","prev","downloadGraphAsPng","svgElement","clonedSvg","cloneNode","bbox","getBBox","padding","setAttribute","rect","createElementNS","insertBefore","firstChild","svgString","XMLSerializer","serializeToString","onload","canvas","ctx","getContext","fillStyle","fillRect","drawImage","toDataURL","min","max","onChange","e","Number","ref","PageSpeedTest","setUrl","desktopResult","setDesktopResult","mobileResult","setMobileResult","isLoading","setIsLoading","setError","fetchPageSpeedData","strategy","endpoint","response","fetch","ok","json","renderScoreCard","score","categories","performance","scoreColor","getScoreColor","backgroundColor","backgroundImage","audits","displayValue","renderMetrics","activeUrl","getActiveTabUrl","desktop","mobile","all","lighthouseResult","err","message","disabled","Footer","DownloadPdf","doc","jsPDF","align","summaryData","yPosition","item","addPage","splitTextToSize","line","save","App","TabNavigation","Images","Header","Schema","ReactDOM","getElementById","render","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","splice","r","getPrototypeOf","obj","t","mode","this","__esModule","then","ns","create","def","indexOf","getOwnPropertyNames","definition","o","defineProperty","enumerable","get","g","globalThis","Function","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}