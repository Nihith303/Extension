{"version":3,"file":"js/popup.js","mappings":"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","sources":["webpack://website-info-crawler/webpack/runtime/chunk loaded","webpack://website-info-crawler/./src/components/navigator/TabNavigation.jsx","webpack://website-info-crawler/./src/tabs/summary/Summary.jsx","webpack://website-info-crawler/./src/tabs/links/Links.jsx","webpack://website-info-crawler/./src/tabs/imagestab/Images.jsx","webpack://website-info-crawler/./src/tabs/header/Header.jsx","webpack://website-info-crawler/./src/tabs/schema/Schema.jsx","webpack://website-info-crawler/./src/tabs/pagespeed/PageSpeed.jsx","webpack://website-info-crawler/./src/components/footer/Footer.jsx","webpack://website-info-crawler/./src/App.jsx","webpack://website-info-crawler/./src/popup.js","webpack://website-info-crawler/webpack/bootstrap","webpack://website-info-crawler/webpack/runtime/define property getters","webpack://website-info-crawler/webpack/runtime/hasOwnProperty shorthand","webpack://website-info-crawler/webpack/runtime/jsonp chunk loading","webpack://website-info-crawler/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import React from \"react\";\r\nimport \"./TabNavigation.css\";\r\n\r\nconst TabNavigation = ({ activeTab, setActiveTab }) => (\r\n  <div className=\"tabs\">\r\n    <button\r\n      className={`tab-button ${activeTab === \"summary\" ? \"active\" : \"\"}`}\r\n      onClick={() => setActiveTab(\"summary\")}>\r\n      Summary\r\n    </button>\r\n    <button\r\n      className={`tab-button ${activeTab === \"links\" ? \"active\" : \"\"}`}\r\n      onClick={() => setActiveTab(\"links\")}>\r\n      Links\r\n    </button>\r\n    <button\r\n      className={`tab-button ${activeTab === \"images\" ? \"active\" : \"\"}`}\r\n      onClick={() => setActiveTab(\"images\")}>\r\n      Images\r\n    </button>\r\n    <button\r\n      className={`tab-button ${activeTab === \"headers\" ? \"active\" : \"\"}`}\r\n      onClick={() => setActiveTab(\"headers\")}>\r\n      Headers\r\n    </button>\r\n    <button\r\n      className={`tab-button ${activeTab === \"schema\" ? \"active\" : \"\"}`}\r\n      onClick={() => setActiveTab(\"schema\")}>\r\n      Schema\r\n  </button>\r\n  <button\r\n      className={`tab-button ${activeTab === \"pagespeedtest\" ? \"active\" : \"\"}`}\r\n      onClick={() => setActiveTab(\"pagespeedtest\")}>\r\n      PageSpeed\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default TabNavigation;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Summary.css\";\r\n\r\nconst Summary = () => {\r\n  const [info, setInfo] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchWebsiteInfo = async () => {\r\n      const [tab] = await chrome.tabs.query({\r\n        active: true,\r\n        currentWindow: true,\r\n      });\r\n      const tabId = tab.id;\r\n\r\n      chrome.scripting.executeScript(\r\n        {\r\n          target: { tabId },\r\n          func: () => {\r\n            const meta = (name) =>\r\n              document.querySelector(`meta[name=\"${name}\"]`)?.content;\r\n            const robotsMeta =\r\n              document.querySelector('meta[name=\"robots\"]')?.content ||\r\n              \"Not Available\";\r\n            const xRobotsMeta =\r\n              document.querySelector('meta[http-equiv=\"X-Robots-Tag\"]')\r\n                ?.content || \"Not Available\";\r\n            const lang = document.documentElement.lang || \"Not Available\";\r\n\r\n            return {\r\n              title: document.title,\r\n              description: meta(\"description\") || \"Not Available\",\r\n              canonical:\r\n                document.querySelector('link[rel=\"canonical\"]')?.href ||\r\n                \"Not Available\",\r\n              robots: robotsMeta,\r\n              xRobots: xRobotsMeta,\r\n              lang: lang,\r\n              url: window.location.href,\r\n            };\r\n          },\r\n        },\r\n        ([result]) => {\r\n          const fetchedData = result.result;\r\n          setInfo(fetchedData);\r\n          setLoading(false);\r\n        }\r\n      );\r\n    };\r\n\r\n    fetchWebsiteInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"active-tab-container\">\r\n      <h2>Summary</h2>\r\n      {loading ? (\r\n        <img src=\"image/loading.gif\" alt=\"Loading\" className=\"loading\"></img>\r\n      ) : (\r\n        <div className=\"info\">\r\n          <p>\r\n            <span>\r\n              <strong>Title</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.title}</span>\r\n          </p>\r\n          <p>\r\n            <span>\r\n              <strong>Description</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.description}</span>\r\n          </p>\r\n          <p>\r\n            <span>\r\n              <strong>Canonical</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.canonical}</span>\r\n          </p>\r\n          <p>\r\n            <span>\r\n              <strong>URL</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.url}</span>\r\n          </p>\r\n          <p>\r\n            <span>\r\n              <strong>Language</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.lang}</span>\r\n          </p>\r\n          <p>\r\n            <span>\r\n              <strong>Robots Meta</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.robots}</span>\r\n          </p>\r\n          <p>\r\n            <span>\r\n              <strong>X-Robots Meta</strong>\r\n            </span>\r\n            <span>:</span>\r\n            <span> {info.xRobots}</span>\r\n          </p>\r\n        </div>\r\n      )}\r\n      {info.url && (\r\n        <div className=\"buttons\">\r\n          <button\r\n            onClick={() => window.open(`${info.url}/sitemap.xml`, \"_blank\")}\r\n          >\r\n            Sitemap\r\n          </button>\r\n          <button\r\n            onClick={() => window.open(`${info.url}/robots.txt`, \"_blank\")}\r\n          >\r\n            Robots.txt\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n\r\n// USing Chrome Storage.\r\n// import React, { useEffect, useState } from \"react\";\r\n// import \"./Summary.css\";\r\n\r\n// const Summary = ({ data, saveData }) => {\r\n//   const [info, setInfo] = useState(data || {});\r\n//   const [loading, setLoading] = useState(!data);\r\n\r\n//   useEffect(() => {\r\n//     if (!data) {\r\n//       const fetchWebsiteInfo = async () => {\r\n//         const [tab] = await chrome.tabs.query({\r\n//           active: true,\r\n//           currentWindow: true,\r\n//         });\r\n//         const tabId = tab.id;\r\n\r\n//         chrome.scripting.executeScript(\r\n//           {\r\n//             target: { tabId },\r\n//             func: () => {\r\n//               const meta = (name) =>\r\n//                 document.querySelector(`meta[name=\"${name}\"]`)?.content;\r\n//               const robotsMeta =\r\n//                 document.querySelector('meta[name=\"robots\"]')?.content ||\r\n//                 \"Not Available\";\r\n//               const xRobotsMeta =\r\n//                 document.querySelector('meta[http-equiv=\"X-Robots-Tag\"]')\r\n//                   ?.content || \"Not Available\";\r\n//               const lang = document.documentElement.lang || \"Not Available\";\r\n\r\n//               return {\r\n//                 title: document.title,\r\n//                 description: meta(\"description\") || \"Not Available\",\r\n//                 canonical:\r\n//                   document.querySelector('link[rel=\"canonical\"]')?.href ||\r\n//                   \"Not Available\",\r\n//                 robots: robotsMeta,\r\n//                 xRobots: xRobotsMeta,\r\n//                 lang: lang,\r\n//                 url: window.location.href,\r\n//               };\r\n//             },\r\n//           },\r\n//           ([result]) => {\r\n//             const fetchedData = result.result;\r\n//             setInfo(fetchedData);\r\n//             saveData(fetchedData);\r\n//             setLoading(false);\r\n//           }\r\n//         );\r\n//       };\r\n\r\n//       fetchWebsiteInfo();\r\n//     }\r\n//   }, [data, saveData]);\r\n\r\n//   return (\r\n//     <div className=\"active-tab-container\">\r\n//       <h2>Summary</h2>\r\n//       {loading ? (\r\n//         <img src=\"image/loading.gif\" alt=\"Loading\" className=\"loading\"></img>\r\n//       ) : (\r\n//         <div className=\"info\">\r\n//           <p>\r\n//             <span>\r\n//               <strong>Title</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.title}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Description</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.description}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Canonical</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.canonical}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>URL</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.url}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Language</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.lang}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>Robots Meta</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.robots}</span>\r\n//           </p>\r\n//           <p>\r\n//             <span>\r\n//               <strong>X-Robots Meta</strong>\r\n//             </span>\r\n//             <span>:</span>\r\n//             <span> {info.xRobots}</span>\r\n//           </p>\r\n//         </div>\r\n//       )}\r\n//       {info.url && (\r\n//         <div className=\"buttons\">\r\n//           <button\r\n//             onClick={() => window.open(`${info.url}/sitemap.xml`, \"_blank\")}\r\n//           >\r\n//             Sitemap\r\n//           </button>\r\n//           <button\r\n//             onClick={() => window.open(`${info.url}/robots.txt`, \"_blank\")}\r\n//           >\r\n//             Robots.txt\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Summary;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Links.css\";\r\n\r\nconst Links = () => {\r\n  const [links, setLinks] = useState([]);\r\n  const [view, setView] = useState(\"total\");\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchLinks = async () => {\r\n      const [tab] = await chrome.tabs.query({\r\n        active: true,\r\n        currentWindow: true,\r\n      });\r\n      const tabId = tab.id;\r\n\r\n      chrome.scripting.executeScript(\r\n        {\r\n          target: { tabId },\r\n          func: () => {\r\n            const links = Array.from(document.querySelectorAll(\"a\"))\r\n              .map((a) => ({\r\n                href: a.href,\r\n                title: a.textContent.trim() || \"No title\",\r\n              }))\r\n              .filter((link) => link.href);\r\n\r\n            const url = window.location.origin;\r\n\r\n            const internal = links.filter((link) => link.href.startsWith(url));\r\n            const external = links.filter((link) => !link.href.startsWith(url));\r\n            const unique = [...new Set(links.map((link) => link.href))].map(\r\n              (href) => ({\r\n                href,\r\n                title:\r\n                  links.find((link) => link.href === href)?.title || \"No title\",\r\n              })\r\n            );\r\n\r\n            return {\r\n              total: links,\r\n              internal,\r\n              external,\r\n              unique,\r\n            };\r\n          },\r\n        },\r\n        ([result]) => {\r\n          setLinks(result.result);\r\n          setLoading(false);\r\n        }\r\n      );\r\n    };\r\n\r\n    fetchLinks();\r\n  }, []);\r\n\r\n  const exportToCSV = () => {\r\n    const csvRows = [];\r\n    csvRows.push(\"URL,Title\");\r\n    links[view]?.forEach(({ href, title }) => {\r\n      csvRows.push(`\"${href}\",\"${title}\"`);\r\n    });\r\n\r\n    const csvContent = csvRows.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = `${view}-links.csv`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  return (\r\n    <div className=\"active-tab-container\">\r\n      <h2>Links</h2>\r\n      {loading ? (\r\n        <img className=\"loading\" src=\"image/loading.gif\" alt=\"Loading\"></img>\r\n      ) : (\r\n        <>\r\n          <div className=\"link-counts\">\r\n            <div className=\"link-item\">\r\n              <span>Total Links</span>\r\n              <span>{links.total?.length || 0}</span>\r\n            </div>\r\n            <div className=\"link-item\">\r\n              <span>Internal Links</span>\r\n              <span>{links.internal?.length || 0}</span>\r\n            </div>\r\n            <div className=\"link-item\">\r\n              <span>External Links</span>\r\n              <span>{links.external?.length || 0}</span>\r\n            </div>\r\n            <div className=\"link-item\">\r\n              <span>Unique Links</span>\r\n              <span>{links.unique?.length || 0}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"filter-buttons\">\r\n            <button\r\n              className={view === \"total\" ? \"active\" : \"\"}\r\n              onClick={() => setView(\"total\")}\r\n            >\r\n              Total\r\n            </button>\r\n            <button\r\n              className={view === \"internal\" ? \"active\" : \"\"}\r\n              onClick={() => setView(\"internal\")}\r\n            >\r\n              Internal\r\n            </button>\r\n            <button\r\n              className={view === \"external\" ? \"active\" : \"\"}\r\n              onClick={() => setView(\"external\")}\r\n            >\r\n              External\r\n            </button>\r\n            <button\r\n              className={view === \"unique\" ? \"active\" : \"\"}\r\n              onClick={() => setView(\"unique\")}\r\n            >\r\n              Unique\r\n            </button>\r\n            <button className=\"link-export-button\" onClick={exportToCSV}>\r\n              Export\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"links-table\">\r\n            {links[view]?.length > 0 ? (\r\n              links[view].map((link, index) => (\r\n                <React.Fragment key={index}>\r\n                  <div className=\"link-details\">\r\n                    <p>\r\n                      <strong>URL:</strong>\r\n                      <a\r\n                        href={link.href}\r\n                        className=\"link-url\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                      >\r\n                        {link.href}\r\n                      </a>\r\n                    </p>\r\n                    <p>\r\n                      <strong>Title:</strong> {link.title}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"link-count\">\r\n                    <p>\r\n                      <strong>Count:</strong>{\" \"}\r\n                      {links.total?.filter((l) => l.href === link.href)\r\n                        .length || 0}\r\n                    </p>\r\n                  </div>\r\n                </React.Fragment>\r\n              ))\r\n            ) : (\r\n              <div className=\"no-items\" id=\"no-links\">\r\n                <p>\r\n                  No Links to show in this <br /> Category\r\n                </p>\r\n                <img src=\"image/notfound.svg\" alt=\"Not Found\" />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Links;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Images.css\";\r\n\r\nconst Image = () => {\r\n  const [images, setImages] = useState({\r\n    total: [],\r\n    noAlt: [],\r\n    noLongDesc: [],\r\n    noSrc: [],\r\n  });\r\n  const [view, setView] = useState(\"total\");\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchImages = async () => {\r\n      const [tab] = await chrome.tabs.query({\r\n        active: true,\r\n        currentWindow: true,\r\n      });\r\n      const tabId = tab.id;\r\n\r\n      chrome.scripting.executeScript(\r\n        {\r\n          target: { tabId },\r\n          func: () => {\r\n            const images = Array.from(document.querySelectorAll(\"img\")).map(\r\n              (img) => ({\r\n                src: img.src || \"No SRC\",\r\n                alt: img.alt || \"No ALT\",\r\n                longDesc: img.longdesc || \"No Description\",\r\n                width: img.naturalWidth || \"N/A\",\r\n                height: img.naturalHeight || \"N/A\",\r\n              })\r\n            );\r\n\r\n            const noAlt = images.filter((img) => img.alt === \"No ALT\");\r\n            const noLongDesc = images.filter(\r\n              (img) => img.longDesc === \"No Description\"\r\n            );\r\n            const noSrc = images.filter((img) => img.src === \"No SRC\");\r\n\r\n            return {\r\n              total: images,\r\n              noAlt,\r\n              noLongDesc,\r\n              noSrc,\r\n            };\r\n          },\r\n        },\r\n        ([result]) => {\r\n          setImages(result.result);\r\n          setLoading(false);\r\n        }\r\n      );\r\n    };\r\n\r\n    fetchImages();\r\n  }, []);\r\n\r\n  const exportCSV = () => {\r\n    const csvData = images[view]\r\n      .map(\r\n        (img) =>\r\n          `${img.src},${img.alt},${img.longDesc},${img.width}x${img.height}`\r\n      )\r\n      .join(\"\\n\");\r\n    const blob = new Blob([`URL,ALT,LongDesc,Size\\n${csvData}`], {\r\n      type: \"text/csv\",\r\n    });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"images.csv\";\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const handleImageClick = (imgSrc) => {\r\n    const newTab = window.open();\r\n    if (newTab) {\r\n      newTab.document.body.innerHTML = `\r\n        <div style=\"text-align: center; margin: 20px;\">\r\n          <img src=\"${imgSrc}\" alt=\"Full Image\" style=\"max-width: 100%; height: auto; margin-bottom: 20px;\"/><br/>\r\n          <a href=\"${imgSrc}\" download=\"${imgSrc.split(\"/\").pop()}\" \r\n            style=\"display: inline-block; padding: 10px 20px; background-color: #0056b3; color: white; text-decoration: none; border-radius: 5px;\">\r\n            Download\r\n          </a>\r\n        </div>\r\n      `;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"active-tab-container\">\r\n      <h2>Images</h2>\r\n      {loading ? (\r\n        <img src=\"image/loading.gif\" alt=\"Loading\" className=\"loading\"></img>\r\n      ) : (\r\n        <>\r\n          <div className=\"image-counts\">\r\n            <div className=\"image-item\">\r\n              <span>Total Images</span>\r\n              <span>{images.total?.length || 0}</span>\r\n            </div>\r\n            <div className=\"image-item\">\r\n              <span>Without ALT</span>\r\n              <span>{images.noAlt?.length || 0}</span>\r\n            </div>\r\n            <div className=\"image-item\">\r\n              <span>Without Description</span>\r\n              <span>{images.noLongDesc?.length || 0}</span>\r\n            </div>\r\n            <div className=\"image-item\">\r\n              <span>Without SRC</span>\r\n              <span>{images.noSrc?.length || 0}</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"image-nav\">\r\n            <button onClick={() => setView(\"total\")}>Total</button>\r\n            <button onClick={() => setView(\"noAlt\")}>No ALT</button>\r\n            <button onClick={() => setView(\"noLongDesc\")}>\r\n              No Description\r\n            </button>\r\n            <button onClick={() => setView(\"noSrc\")}>No SRC</button>\r\n            <button className=\"export-button\" onClick={exportCSV}>\r\n              Export\r\n            </button>\r\n          </div>\r\n          <div className=\"images-table\">\r\n            {images[view].length === 0 ? (\r\n              <div className=\"no-items\">\r\n                <p>No Images to show in this Category</p>\r\n                <img src=\"image/notfound.svg\" alt=\"Not Found\" />\r\n              </div>\r\n            ) : (\r\n              images[view].map((img, index) => (\r\n                <React.Fragment key={index}>\r\n                  <div className=\"image-details\">\r\n                    <p onClick={() => handleImageClick(img.src)}>\r\n                      <strong>URL:</strong>{\" \"}\r\n                      <span className=\"image-url\">{img.src}</span>\r\n                    </p>\r\n                    <p>\r\n                      <strong>ALT:</strong> {img.alt}\r\n                    </p>\r\n                    <p>\r\n                      <strong>Description:</strong> {img.longDesc}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"image-preview\">\r\n                    {img.src !== \"No SRC\" ? (\r\n                      <img\r\n                        src={img.src}\r\n                        alt=\"Preview\"\r\n                        onClick={() => handleImageClick(img.src)}\r\n                      />\r\n                    ) : (\r\n                      <p>No SRC</p>\r\n                    )}\r\n                    <p>\r\n                      {img.width}x{img.height}\r\n                    </p>\r\n                  </div>\r\n                </React.Fragment>\r\n              ))\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Image;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Headers = () => {\r\n  const [headers, setHeaders] = useState([]);\r\n  const [headerCounts, setHeaderCounts] = useState({\r\n    h1: 0,\r\n    h2: 0,\r\n    h3: 0,\r\n    h4: 0,\r\n    h5: 0,\r\n    h6: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchHeaders = async () => {\r\n      const [tab] = await chrome.tabs.query({\r\n        active: true,\r\n        currentWindow: true,\r\n      });\r\n      const tabId = tab.id;\r\n\r\n      chrome.scripting.executeScript(\r\n        {\r\n          target: { tabId },\r\n          func: () => {\r\n            const headers = [];\r\n            const headerTags = Array.from(\r\n              document.querySelectorAll(\"h1, h2, h3, h4, h5, h6\")\r\n            );\r\n            headerTags.forEach((header) => {\r\n              headers.push({\r\n                tag: header.tagName.toLowerCase(),\r\n                text: header.textContent.trim(),\r\n              });\r\n            });\r\n            return headers;\r\n          },\r\n        },\r\n        ([result]) => {\r\n          const fetchedHeaders = result.result || [];\r\n          const counts = {\r\n            h1: fetchedHeaders.filter((h) => h.tag === \"h1\").length,\r\n            h2: fetchedHeaders.filter((h) => h.tag === \"h2\").length,\r\n            h3: fetchedHeaders.filter((h) => h.tag === \"h3\").length,\r\n            h4: fetchedHeaders.filter((h) => h.tag === \"h4\").length,\r\n            h5: fetchedHeaders.filter((h) => h.tag === \"h5\").length,\r\n            h6: fetchedHeaders.filter((h) => h.tag === \"h6\").length,\r\n          };\r\n\r\n          setHeaders(fetchedHeaders);\r\n          setHeaderCounts(counts);\r\n        }\r\n      );\r\n    };\r\n\r\n    fetchHeaders();\r\n  }, []);\r\n\r\n  const isEmpty = Object.values(headerCounts).every((count) => count === 0);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Headers</h2>\r\n      <div className=\"header-counts\">\r\n        {Object.keys(headerCounts).map((key) => (\r\n          <div className=\"header-item\" key={key}>\r\n            <span>{key.toUpperCase()}</span>\r\n            <span>{headerCounts[key] || 0}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {isEmpty ? (\r\n        <div className=\"no-items\" id=\"no-headers\">\r\n          <p>No Headers Found on this Website.</p>\r\n          <img src=\"image/notfound.svg\" alt=\"Not Found\" />\r\n        </div>\r\n      ) : (\r\n        <div className=\"header-structure\">\r\n          {headers.map((header, index) => (\r\n            <div key={index} className={`header-content header-${header.tag}`}>\r\n              <span className=\"dashed-line\"></span>\r\n              <strong>\r\n                <span className=\"header-tag\">{header.tag}</span>\r\n              </strong>\r\n              <span className=\"header-text\">{header.text}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Headers;\r\n","// Using D3 With Scrollers with Single Root Nodec without tooltip.\r\n\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport \"./Schema.css\";\r\n\r\nconst SchemaViewer = () => {\r\n  const [schemas, setSchemas] = useState([]);\r\n  const [linkDistance, setLinkDistance] = useState(70);\r\n  const [fontSize, setFontSize] = useState(12);\r\n  const [nodeSize, setNodeSize] = useState(8);\r\n  const [isDragEnabled, setIsDragEnabled] = useState(true);\r\n  const graphRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const fetchSchemas = async () => {\r\n      const [tab] = await chrome.tabs.query({\r\n        active: true,\r\n        currentWindow: true,\r\n      });\r\n      const tabId = tab.id;\r\n\r\n      chrome.scripting.executeScript(\r\n        {\r\n          target: { tabId },\r\n          func: () => {\r\n            const schemaScripts = Array.from(\r\n              document.querySelectorAll('script[type=\"application/ld+json\"]')\r\n            );\r\n            return schemaScripts\r\n              .map((script) => {\r\n                try {\r\n                  return JSON.parse(script.innerText);\r\n                } catch {\r\n                  return null;\r\n                }\r\n              })\r\n              .filter(Boolean);\r\n          },\r\n        },\r\n        ([result]) => {\r\n          setSchemas(result.result || []);\r\n        }\r\n      );\r\n    };\r\n\r\n    fetchSchemas();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (schemas.length > 0) {\r\n      const graphData = buildGraphData(schemas);\r\n      renderGraph(graphData);\r\n    }\r\n  }, [schemas, linkDistance, fontSize, nodeSize, isDragEnabled]);\r\n\r\n  const buildGraphData = (schemas) => {\r\n    const nodes = [];\r\n    const links = [];\r\n    const rootNode = { id: 0, name: \"Schema\" };\r\n    nodes.push(rootNode);\r\n\r\n    let nodeId = 1;\r\n\r\n    const traverse = (data, parentId = 0, linkName = \"\") => {\r\n      if (typeof data === \"object\" && data !== null) {\r\n        const currentId = nodeId++;\r\n        nodes.push({\r\n          id: currentId,\r\n          name: data[\"@type\"] || \"Object\",\r\n        });\r\n\r\n        links.push({\r\n          source: parentId,\r\n          target: currentId,\r\n          linkName: linkName,\r\n        });\r\n\r\n        Object.entries(data).forEach(([key, value]) => {\r\n          if (key !== \"@type\") {\r\n            traverse(value, currentId, key);\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    schemas.forEach((schema) => traverse(schema));\r\n    return { nodes, links };\r\n  };\r\n\r\n  const renderGraph = ({ nodes, links }) => {\r\n    const width = 1000;\r\n    const height = 1000;\r\n\r\n    d3.select(graphRef.current).selectAll(\"*\").remove();\r\n    const svg = d3\r\n      .select(graphRef.current)\r\n      .append(\"svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .call(\r\n        d3\r\n          .zoom()\r\n          .scaleExtent([0.01, 5])\r\n          .on(\"zoom\", (event) => {\r\n            graphGroup.attr(\"transform\", event.transform);\r\n          })\r\n      );\r\n\r\n    const graphGroup = svg.append(\"g\");\r\n\r\n    svg\r\n      .append(\"defs\")\r\n      .append(\"marker\")\r\n      .attr(\"id\", \"arrow\")\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 25)\r\n      .attr(\"refY\", 0)\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .attr(\"orient\", \"auto\")\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#aaa\");\r\n\r\n    const simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\r\n        \"link\",\r\n        d3\r\n          .forceLink(links)\r\n          .id((d) => d.id)\r\n          .distance(linkDistance)\r\n      )\r\n      .force(\"charge\", d3.forceManyBody().strength(-300))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2));\r\n\r\n    const link = graphGroup\r\n      .append(\"g\")\r\n      .attr(\"stroke\", \"#aaa\")\r\n      .attr(\"stroke-width\", 2)\r\n      .selectAll(\"line\")\r\n      .data(links)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"marker-end\", \"url(#arrow)\");\r\n\r\n    const linkLabel = graphGroup\r\n      .append(\"g\")\r\n      .selectAll(\"text\")\r\n      .data(links)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"font-size\", `${fontSize * 0.8}px`)\r\n      .attr(\"dy\", 5)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .text((d) => d.linkName);\r\n\r\n    const node = graphGroup\r\n      .append(\"g\")\r\n      .attr(\"stroke\", \"#fff\")\r\n      .attr(\"stroke-width\", 1.5)\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", nodeSize)\r\n      .attr(\"fill\", (d) => d3.schemeCategory10[d.id % 10])\r\n      .call(isDragEnabled ? drag(simulation) : () => {});\r\n\r\n    const label = graphGroup\r\n      .append(\"g\")\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"dy\", -10)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .text((d) => d.name)\r\n      .style(\"font-size\", `${fontSize}px`)\r\n      .style(\"font-weight\", \"bold\");\r\n\r\n    simulation.on(\"tick\", () => {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n\r\n      linkLabel\r\n        .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\r\n        .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\r\n\r\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n    });\r\n\r\n    function drag(simulation) {\r\n      function dragstarted(event) {\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        event.subject.fx = event.subject.x;\r\n        event.subject.fy = event.subject.y;\r\n      }\r\n\r\n      function dragged(event) {\r\n        event.subject.fx = event.x;\r\n        event.subject.fy = event.y;\r\n      }\r\n\r\n      function dragended(event) {\r\n        if (!event.active) simulation.alphaTarget(0);\r\n        event.subject.fx = null;\r\n        event.subject.fy = null;\r\n      }\r\n\r\n      return d3\r\n        .drag()\r\n        .on(\"start\", dragstarted)\r\n        .on(\"drag\", dragged)\r\n        .on(\"end\", dragended);\r\n    }\r\n  };\r\n\r\n  const downloadGraphAsPng = () => {\r\n    const svgElement = graphRef.current.querySelector(\"svg\");\r\n    const clonedSvg = svgElement.cloneNode(true);\r\n    const bbox = svgElement.getBBox();\r\n    const padding = 0;\r\n    const width = bbox.width + padding * 2;\r\n    const height = bbox.height + padding * 2;\r\n    clonedSvg.setAttribute(\r\n      \"viewBox\",\r\n      `${bbox.x - padding} ${bbox.y - padding} ${width} ${height}`\r\n    );\r\n    clonedSvg.setAttribute(\"width\", width);\r\n    clonedSvg.setAttribute(\"height\", height);\r\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\r\n    rect.setAttribute(\"x\", bbox.x - padding);\r\n    rect.setAttribute(\"y\", bbox.y - padding);\r\n    rect.setAttribute(\"width\", width);\r\n    rect.setAttribute(\"height\", height);\r\n    rect.setAttribute(\"fill\", \"white\");\r\n    clonedSvg.insertBefore(rect, clonedSvg.firstChild);\r\n    const serializer = new XMLSerializer();\r\n    const svgString = serializer.serializeToString(clonedSvg);\r\n    const blob = new Blob([svgString], { type: \"image/svg+xml;charset=utf-8\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      const canvas = document.createElement(\"canvas\");\r\n      const scaleFactor = 4;\r\n      canvas.width = width * scaleFactor;\r\n      canvas.height = height * scaleFactor;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.fillStyle = \"white\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      ctx.drawImage(\r\n        img,\r\n        padding * scaleFactor,\r\n        padding * scaleFactor,\r\n        width * scaleFactor,\r\n        height * scaleFactor\r\n      );\r\n      const link = document.createElement(\"a\");\r\n      link.download = \"schema-graph.png\";\r\n      link.href = canvas.toDataURL(\"image/png\");\r\n      link.click();\r\n      URL.revokeObjectURL(url);\r\n    };\r\n    img.src = url;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h2>Schema Visualizer</h2>\r\n        <button\r\n          onClick={() => setIsDragEnabled((prev) => !prev)}\r\n          id=\"pause-play\"\r\n        >\r\n          {isDragEnabled ? (\r\n            <img src=\"image/pause.svg\" alt=\"Pause button\" />\r\n          ) : (\r\n            <img src=\"image/play.svg\" alt=\"Play button\" />\r\n          )}\r\n        </button>\r\n        <button onClick={downloadGraphAsPng} id=\"download-btn\">\r\n          <img src=\"image/download.svg\" alt=\"Download Graph\" />\r\n        </button>\r\n        <div className=\"controls\">\r\n          <div className=\"control-item\">\r\n            <label>Font Size</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"8\"\r\n              max=\"30\"\r\n              value={fontSize}\r\n              onChange={(e) => setFontSize(Number(e.target.value))}\r\n            />\r\n            <span>{fontSize}</span>\r\n          </div>\r\n          <div className=\"control-item\">\r\n            <label>Node Size</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"5\"\r\n              max=\"20\"\r\n              value={nodeSize}\r\n              onChange={(e) => setNodeSize(Number(e.target.value))}\r\n            />\r\n            <span>{nodeSize}</span>\r\n          </div>\r\n          <div className=\"control-item\">\r\n            <label>Link Distance</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"20\"\r\n              max=\"200\"\r\n              value={linkDistance}\r\n              onChange={(e) => setLinkDistance(Number(e.target.value))}\r\n            />\r\n            <span>{linkDistance}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {schemas.length > 0 ? (\r\n        <div ref={graphRef} className=\"graph-container\"></div>\r\n      ) : (\r\n        <div className=\"no-items\">\r\n          <p>No Schema Found on this Website.</p>\r\n          <img src=\"image/notfound.svg\" alt=\"Not Found\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SchemaViewer;\r\n\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import * as d3 from \"d3\";\r\n// import \"./Schema.css\";\r\n\r\n// const SchemaViewer = () => {\r\n//   const [schemas, setSchemas] = useState([]);\r\n//   const [linkDistance, setLinkDistance] = useState(70);\r\n//   const [fontSize, setFontSize] = useState(12);\r\n//   const [nodeSize, setNodeSize] = useState(8);\r\n//   const graphRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSchemas = async () => {\r\n//       const [tab] = await chrome.tabs.query({\r\n//         active: true,\r\n//         currentWindow: true,\r\n//       });\r\n//       const tabId = tab.id;\r\n\r\n//       chrome.scripting.executeScript(\r\n//         {\r\n//           target: { tabId },\r\n//           func: () => {\r\n//             const schemaScripts = Array.from(\r\n//               document.querySelectorAll('script[type=\"application/ld+json\"]')\r\n//             );\r\n//             return schemaScripts\r\n//               .map((script) => {\r\n//                 try {\r\n//                   return JSON.parse(script.innerText);\r\n//                 } catch {\r\n//                   return null;\r\n//                 }\r\n//               })\r\n//               .filter(Boolean);\r\n//           },\r\n//         },\r\n//         ([result]) => {\r\n//           setSchemas(result.result || []);\r\n//         }\r\n//       );\r\n//     };\r\n\r\n//     fetchSchemas();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (schemas.length > 0) {\r\n//       const graphData = buildGraphData(schemas);\r\n//       renderGraph(graphData);\r\n//     }\r\n//   }, [schemas, linkDistance, fontSize, nodeSize]);\r\n\r\n//   const buildGraphData = (schemas) => {\r\n//     const nodes = [];\r\n//     const links = [];\r\n//     const rootNode = { id: 0, name: \"Schema\" };\r\n//     nodes.push(rootNode);\r\n\r\n//     let nodeId = 1;\r\n\r\n//     const traverse = (data, parentId = 0, linkName = \"\") => {\r\n//       if (typeof data === \"object\" && data !== null) {\r\n//         const currentId = nodeId++;\r\n//         nodes.push({\r\n//           id: currentId,\r\n//           name: data[\"@type\"] || \"Object\",\r\n//         });\r\n\r\n//         links.push({\r\n//           source: parentId,\r\n//           target: currentId,\r\n//           linkName: linkName,\r\n//         });\r\n\r\n//         Object.entries(data).forEach(([key, value]) => {\r\n//           if (key !== \"@type\") {\r\n//             traverse(value, currentId, key);\r\n//           }\r\n//         });\r\n//       }\r\n//     };\r\n\r\n//     schemas.forEach((schema) => traverse(schema));\r\n//     return { nodes, links };\r\n//   };\r\n\r\n//   const renderGraph = ({ nodes, links }) => {\r\n//     const width = 1000;\r\n//     const height = 1000;\r\n\r\n//     d3.select(graphRef.current).selectAll(\"*\").remove();\r\n//     const svg = d3\r\n//       .select(graphRef.current)\r\n//       .append(\"svg\")\r\n//       .attr(\"width\", width)\r\n//       .attr(\"height\", height)\r\n//       .call(\r\n//         d3\r\n//           .zoom()\r\n//           .scaleExtent([0.01, 5])\r\n//           .on(\"zoom\", (event) => {\r\n//             graphGroup.attr(\"transform\", event.transform);\r\n//           })\r\n//       );\r\n\r\n//     const graphGroup = svg.append(\"g\");\r\n\r\n//     svg\r\n//       .append(\"defs\")\r\n//       .append(\"marker\")\r\n//       .attr(\"id\", \"arrow\")\r\n//       .attr(\"viewBox\", \"0 -5 10 10\")\r\n//       .attr(\"refX\", 25)\r\n//       .attr(\"refY\", 0)\r\n//       .attr(\"markerWidth\", 6)\r\n//       .attr(\"markerHeight\", 6)\r\n//       .attr(\"orient\", \"auto\")\r\n//       .append(\"path\")\r\n//       .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n//       .attr(\"fill\", \"#aaa\");\r\n\r\n//     const simulation = d3\r\n//       .forceSimulation(nodes)\r\n//       .force(\r\n//         \"link\",\r\n//         d3\r\n//           .forceLink(links)\r\n//           .id((d) => d.id)\r\n//           .distance(linkDistance)\r\n//       )\r\n//       .force(\"charge\", d3.forceManyBody().strength(-300))\r\n//       .force(\"center\", d3.forceCenter(width / 2, height / 2));\r\n\r\n//     const link = graphGroup\r\n//       .append(\"g\")\r\n//       .attr(\"stroke\", \"#aaa\")\r\n//       .attr(\"stroke-width\", 2)\r\n//       .selectAll(\"line\")\r\n//       .data(links)\r\n//       .enter()\r\n//       .append(\"line\")\r\n//       .attr(\"marker-end\", \"url(#arrow)\");\r\n\r\n//     const linkLabel = graphGroup\r\n//       .append(\"g\")\r\n//       .selectAll(\"text\")\r\n//       .data(links)\r\n//       .enter()\r\n//       .append(\"text\")\r\n//       .attr(\"font-size\", `${fontSize * 0.8}px`)\r\n//       .attr(\"dy\", 5)\r\n//       .attr(\"text-anchor\", \"middle\")\r\n//       .text((d) => d.linkName);\r\n\r\n//     const node = graphGroup\r\n//       .append(\"g\")\r\n//       .attr(\"stroke\", \"#fff\")\r\n//       .attr(\"stroke-width\", 1.5)\r\n//       .selectAll(\"circle\")\r\n//       .data(nodes)\r\n//       .enter()\r\n//       .append(\"circle\")\r\n//       .attr(\"r\", nodeSize)\r\n//       .attr(\"fill\", (d) => d3.schemeCategory10[d.id % 10])\r\n//       .call(drag(simulation));\r\n\r\n//     const label = graphGroup\r\n//       .append(\"g\")\r\n//       .selectAll(\"text\")\r\n//       .data(nodes)\r\n//       .enter()\r\n//       .append(\"text\")\r\n//       .attr(\"dy\", -10)\r\n//       .attr(\"text-anchor\", \"middle\")\r\n//       .text((d) => d.name)\r\n//       .style(\"font-size\", `${fontSize}px`)\r\n//       .style(\"font-weight\", \"bold\");\r\n\r\n//     simulation.on(\"tick\", () => {\r\n//       link\r\n//         .attr(\"x1\", (d) => d.source.x)\r\n//         .attr(\"y1\", (d) => d.source.y)\r\n//         .attr(\"x2\", (d) => d.target.x)\r\n//         .attr(\"y2\", (d) => d.target.y);\r\n\r\n//       linkLabel\r\n//         .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\r\n//         .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\r\n\r\n//       node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n//       label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n//     });\r\n\r\n//     function drag(simulation) {\r\n//       function dragstarted(event) {\r\n//         if (!event.active) simulation.alphaTarget(0.3).restart();\r\n//         event.subject.fx = event.subject.x;\r\n//         event.subject.fy = event.subject.y;\r\n//       }\r\n\r\n//       function dragged(event) {\r\n//         event.subject.fx = event.x;\r\n//         event.subject.fy = event.y;\r\n//       }\r\n\r\n//       function dragended(event) {\r\n//         if (!event.active) simulation.alphaTarget(0);\r\n//         event.subject.fx = null;\r\n//         event.subject.fy = null;\r\n//       }\r\n\r\n//       return d3\r\n//         .drag()\r\n//         .on(\"start\", dragstarted)\r\n//         .on(\"drag\", dragged)\r\n//         .on(\"end\", dragended);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Schema Viewer</h2>\r\n//       <div className=\"controls\">\r\n//         <div>\r\n//           <label>Link Distance: {linkDistance}</label>\r\n//           <input\r\n//             type=\"range\"\r\n//             min=\"30\"\r\n//             max=\"180\"\r\n//             value={linkDistance}\r\n//             onChange={(e) => setLinkDistance(Number(e.target.value))}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label>Font Size: {fontSize}px</label>\r\n//           <input\r\n//             type=\"range\"\r\n//             min=\"6\"\r\n//             max=\"20\"\r\n//             value={fontSize}\r\n//             onChange={(e) => setFontSize(Number(e.target.value))}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label>Node Size: {nodeSize}px</label>\r\n//           <input\r\n//             type=\"range\"\r\n//             min=\"4\"\r\n//             max=\"20\"\r\n//             value={nodeSize}\r\n//             onChange={(e) => setNodeSize(Number(e.target.value))}\r\n//           />\r\n//         </div>\r\n//       </div>\r\n\r\n//       {schemas.length > 0 ? (\r\n//         <div ref={graphRef} className=\"graph-container\"></div>\r\n//       ) : (\r\n//         <div className=\"no-items\" id=\"no-schema\">\r\n//           <p>No Schema Found on this Website.</p>\r\n//           <img src=\"image/notfound.svg\" alt=\"Not Found\" />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SchemaViewer;\r\n\r\n// Using D3 for Visualization with Scrollers without Single Root Node.\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import * as d3 from \"d3\";\r\n// import \"./Schema.css\";\r\n\r\n// const SchemaViewer = () => {\r\n//   const [schemas, setSchemas] = useState([]);\r\n//   const [linkDistance, setLinkDistance] = useState(100);\r\n//   const [fontSize, setFontSize] = useState(12);\r\n//   const graphRef = useRef(null);\r\n//   const simulationRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSchemas = async () => {\r\n//       const [tab] = await chrome.tabs.query({\r\n//         active: true,\r\n//         currentWindow: true,\r\n//       });\r\n//       const tabId = tab.id;\r\n\r\n//       chrome.scripting.executeScript(\r\n//         {\r\n//           target: { tabId },\r\n//           func: () => {\r\n//             const schemaScripts = Array.from(\r\n//               document.querySelectorAll('script[type=\"application/ld+json\"]')\r\n//             );\r\n//             return schemaScripts\r\n//               .map((script) => {\r\n//                 try {\r\n//                   return JSON.parse(script.innerText);\r\n//                 } catch {\r\n//                   return null;\r\n//                 }\r\n//               })\r\n//               .filter(Boolean);\r\n//           },\r\n//         },\r\n//         ([result]) => {\r\n//           setSchemas(result.result || []);\r\n//         }\r\n//       );\r\n//     };\r\n\r\n//     fetchSchemas();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (schemas.length > 0) {\r\n//       const graphData = buildGraphData(schemas);\r\n//       renderGraph(graphData);\r\n//     }\r\n//   }, [schemas, linkDistance, fontSize]);\r\n\r\n//   const buildGraphData = (schemas) => {\r\n//     const nodes = [];\r\n//     const links = [];\r\n\r\n//     const traverse = (data, parentId = null) => {\r\n//       if (typeof data === \"object\" && data !== null) {\r\n//         const currentId = nodes.length;\r\n//         nodes.push({\r\n//           id: currentId,\r\n//           name: data[\"@type\"] || data[\"@name\"],\r\n//         });\r\n\r\n//         if (parentId !== null) {\r\n//           links.push({ source: parentId, target: currentId });\r\n//         }\r\n\r\n//         Object.entries(data).forEach(([key, value]) => {\r\n//           if (key !== \"@type\") {\r\n//             traverse(value, currentId);\r\n//           }\r\n//         });\r\n//       }\r\n//     };\r\n\r\n//     schemas.forEach((schema) => traverse(schema));\r\n//     return { nodes, links };\r\n//   };\r\n\r\n//   const renderGraph = ({ nodes, links }) => {\r\n//     const width = 800;\r\n//     const height = 600;\r\n\r\n//     d3.select(graphRef.current).selectAll(\"*\").remove();\r\n//     const svg = d3\r\n//       .select(graphRef.current)\r\n//       .append(\"svg\")\r\n//       .attr(\"width\", width)\r\n//       .attr(\"height\", height)\r\n//       .call(\r\n//         d3\r\n//           .zoom()\r\n//           .scaleExtent([0.01, 5])\r\n//           .on(\"zoom\", (event) => {\r\n//             graphGroup.attr(\"transform\", event.transform);\r\n//           })\r\n//       );\r\n\r\n//     const graphGroup = svg.append(\"g\");\r\n\r\n//     const simulation = d3\r\n//       .forceSimulation(nodes)\r\n//       .force(\r\n//         \"link\",\r\n//         d3\r\n//           .forceLink(links)\r\n//           .id((d) => d.id)\r\n//           .distance(linkDistance)\r\n//       )\r\n//       .force(\"charge\", d3.forceManyBody().strength(-300))\r\n//       .force(\"center\", d3.forceCenter(width / 2, height / 2));\r\n\r\n//     simulationRef.current = simulation;\r\n\r\n//     const link = graphGroup\r\n//       .append(\"g\")\r\n//       .attr(\"stroke\", \"#aaa\")\r\n//       .attr(\"stroke-width\", 2)\r\n//       .selectAll(\"line\")\r\n//       .data(links)\r\n//       .enter()\r\n//       .append(\"line\");\r\n\r\n//     const node = graphGroup\r\n//       .append(\"g\")\r\n//       .attr(\"stroke\", \"#fff\")\r\n//       .attr(\"stroke-width\", 1.5)\r\n//       .selectAll(\"circle\")\r\n//       .data(nodes)\r\n//       .enter()\r\n//       .append(\"circle\")\r\n//       .attr(\"r\", 8)\r\n//       .attr(\"fill\", (d) => d3.schemeCategory10[d.id % 10])\r\n//       .call(drag(simulation));\r\n\r\n//     const label = graphGroup\r\n//       .append(\"g\")\r\n//       .selectAll(\"text\")\r\n//       .data(nodes)\r\n//       .enter()\r\n//       .append(\"text\")\r\n//       .attr(\"dy\", -10)\r\n//       .attr(\"text-anchor\", \"middle\")\r\n//       .text((d) => d.name)\r\n//       .style(\"font-size\", `${fontSize}px`);\r\n\r\n//     simulation.on(\"tick\", () => {\r\n//       link\r\n//         .attr(\"x1\", (d) => d.source.x)\r\n//         .attr(\"y1\", (d) => d.source.y)\r\n//         .attr(\"x2\", (d) => d.target.x)\r\n//         .attr(\"y2\", (d) => d.target.y);\r\n\r\n//       node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n//       label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n//     });\r\n\r\n//     function drag(simulation) {\r\n//       function dragstarted(event) {\r\n//         if (!event.active) simulation.alphaTarget(0.3).restart();\r\n//         event.subject.fx = event.subject.x;\r\n//         event.subject.fy = event.subject.y;\r\n//       }\r\n\r\n//       function dragged(event) {\r\n//         event.subject.fx = event.x;\r\n//         event.subject.fy = event.y;\r\n//       }\r\n\r\n//       function dragended(event) {\r\n//         if (!event.active) simulation.alphaTarget(0);\r\n//         event.subject.fx = null;\r\n//         event.subject.fy = null;\r\n//       }\r\n\r\n//       return d3\r\n//         .drag()\r\n//         .on(\"start\", dragstarted)\r\n//         .on(\"drag\", dragged)\r\n//         .on(\"end\", dragended);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Schema Viewer</h2>\r\n\r\n//       <div className=\"controls\">\r\n//         <div>\r\n//           <label>Link Distance: {linkDistance}</label>\r\n//           <input\r\n//             type=\"range\"\r\n//             min=\"50\"\r\n//             max=\"300\"\r\n//             value={linkDistance}\r\n//             onChange={(e) => setLinkDistance(Number(e.target.value))}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label>Font Size: {fontSize}px</label>\r\n//           <input\r\n//             type=\"range\"\r\n//             min=\"6\"\r\n//             max=\"20\"\r\n//             value={fontSize}\r\n//             onChange={(e) => setFontSize(Number(e.target.value))}\r\n//           />\r\n//         </div>\r\n//       </div>\r\n\r\n//       {schemas.length > 0 ? (\r\n//         <div ref={graphRef} className=\"graph-container\"></div>\r\n//       ) : (\r\n//         <div className=\"no-items\" id=\"no-schema\">\r\n//           <p>No Schema Found on this Website.</p>\r\n//           <img src=\"image/notfound.svg\" alt=\"Not Found\" />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SchemaViewer;\r\n\r\n// Using D3 for Visualization without Scrollers.\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import * as d3 from \"d3\";\r\n// import \"./Schema.css\";\r\n\r\n// const SchemaViewer = () => {\r\n//   const [schemas, setSchemas] = useState([]);\r\n//   const graphRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSchemas = async () => {\r\n//       const [tab] = await chrome.tabs.query({\r\n//         active: true,\r\n//         currentWindow: true,\r\n//       });\r\n//       const tabId = tab.id;\r\n\r\n//       chrome.scripting.executeScript(\r\n//         {\r\n//           target: { tabId },\r\n//           func: () => {\r\n//             const schemaScripts = Array.from(\r\n//               document.querySelectorAll('script[type=\"application/ld+json\"]')\r\n//             );\r\n//             return schemaScripts\r\n//               .map((script) => {\r\n//                 try {\r\n//                   return JSON.parse(script.innerText);\r\n//                 } catch {\r\n//                   return null;\r\n//                 }\r\n//               })\r\n//               .filter(Boolean);\r\n//           },\r\n//         },\r\n//         ([result]) => {\r\n//           setSchemas(result.result || []);\r\n//         }\r\n//       );\r\n//     };\r\n\r\n//     fetchSchemas();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (schemas.length > 0) {\r\n//       const graphData = buildGraphData(schemas);\r\n//       renderGraph(graphData);\r\n//     }\r\n//   }, [schemas]);\r\n\r\n//   const buildGraphData = (schemas) => {\r\n//     const nodes = [];\r\n//     const links = [];\r\n\r\n//     const traverse = (data, parentId = null) => {\r\n//       if (typeof data === \"object\" && data !== null) {\r\n//         const currentId = nodes.length;\r\n//         nodes.push({ id: currentId, name: data[\"@type\"] || \"Object\" });\r\n\r\n//         if (parentId !== null) {\r\n//           links.push({ source: parentId, target: currentId });\r\n//         }\r\n\r\n//         Object.entries(data).forEach(([key, value]) => {\r\n//           if (key !== \"@type\") {\r\n//             traverse(value, currentId);\r\n//           }\r\n//         });\r\n//       }\r\n//     };\r\n\r\n//     schemas.forEach((schema) => traverse(schema));\r\n//     return { nodes, links };\r\n//   };\r\n\r\n//   const renderGraph = ({ nodes, links }) => {\r\n//     // const width = 800;\r\n//     // const height = 600;\r\n\r\n//     d3.select(graphRef.current).selectAll(\"*\").remove();\r\n//     const svg = d3\r\n//       .select(graphRef.current)\r\n//       .append(\"svg\")\r\n//       .attr(\"width\", width)\r\n//       .attr(\"height\", height)\r\n//       .call(\r\n//         d3\r\n//           .zoom()\r\n//           .scaleExtent([0.01, 5])\r\n//           .on(\"zoom\", (event) => {\r\n//             graphGroup.attr(\"transform\", event.transform);\r\n//           })\r\n//       );\r\n\r\n//     const graphGroup = svg.append(\"g\");\r\n//     const simulation = d3\r\n//       .forceSimulation(nodes)\r\n//       .force(\r\n//         \"link\",\r\n//         d3\r\n//           .forceLink(links)\r\n//           .id((d) => d.id)\r\n//           .distance(100)\r\n//       )\r\n//       .force(\"charge\", d3.forceManyBody().strength(-300))\r\n//       .force(\"center\", d3.forceCenter(width / 2, height / 2));\r\n\r\n//     const link = graphGroup\r\n//       .append(\"g\")\r\n//       .attr(\"stroke\", \"#aaa\")\r\n//       .attr(\"stroke-width\", 2)\r\n//       .selectAll(\"line\")\r\n//       .data(links)\r\n//       .enter()\r\n//       .append(\"line\");\r\n\r\n//     const node = graphGroup\r\n//       .append(\"g\")\r\n//       .attr(\"stroke\", \"#fff\")\r\n//       .attr(\"stroke-width\", 1.5)\r\n//       .selectAll(\"circle\")\r\n//       .data(nodes)\r\n//       .enter()\r\n//       .append(\"circle\")\r\n//       .attr(\"r\", 8)\r\n//       .attr(\"fill\", (d) => d3.schemeCategory10[d.id % 10])\r\n//       .call(drag(simulation));\r\n\r\n//     const label = graphGroup\r\n//       .append(\"g\")\r\n//       .selectAll(\"text\")\r\n//       .data(nodes)\r\n//       .enter()\r\n//       .append(\"text\")\r\n//       .attr(\"dy\", -10)\r\n//       .attr(\"text-anchor\", \"middle\")\r\n//       .text((d) => d.name)\r\n//       .style(\"font-size\", \"10px\");\r\n\r\n//     simulation.on(\"tick\", () => {\r\n//       link\r\n//         .attr(\"x1\", (d) => d.source.x)\r\n//         .attr(\"y1\", (d) => d.source.y)\r\n//         .attr(\"x2\", (d) => d.target.x)\r\n//         .attr(\"y2\", (d) => d.target.y);\r\n\r\n//       node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n//       label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n//     });\r\n\r\n//     function drag(simulation) {\r\n//       function dragstarted(event) {\r\n//         if (!event.active) simulation.alphaTarget(0.3).restart();\r\n//         event.subject.fx = event.subject.x;\r\n//         event.subject.fy = event.subject.y;\r\n//       }\r\n\r\n//       function dragged(event) {\r\n//         event.subject.fx = event.x;\r\n//         event.subject.fy = event.y;\r\n//       }\r\n\r\n//       function dragended(event) {\r\n//         if (!event.active) simulation.alphaTarget(0);\r\n//         event.subject.fx = null;\r\n//         event.subject.fy = null;\r\n//       }\r\n\r\n//       return d3\r\n//         .drag()\r\n//         .on(\"start\", dragstarted)\r\n//         .on(\"drag\", dragged)\r\n//         .on(\"end\", dragended);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Schema Viewer</h2>\r\n//       {schemas.length > 0 ? (\r\n//         <div ref={graphRef} className=\"graph-container\"></div>\r\n//       ) : (\r\n//         <div className=\"no-items\" id=\"no-schema\">\r\n//           <p>No Schema Found on this Website.</p>\r\n//           <img src=\"image/notfound.svg\" alt=\"Not Found\" />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SchemaViewer;\r\n\r\n// Without D3 Framework.\r\n// import React, { useEffect, useState } from \"react\";\r\n// import \"./Schema.css\";\r\n\r\n// const SchemaViewer = () => {\r\n//   const [schemas, setSchemas] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSchemas = async () => {\r\n//       const [tab] = await chrome.tabs.query({\r\n//         active: true,\r\n//         currentWindow: true,\r\n//       });\r\n//       const tabId = tab.id;\r\n\r\n//       chrome.scripting.executeScript(\r\n//         {\r\n//           target: { tabId },\r\n//           func: () => {\r\n//             const schemaScripts = Array.from(\r\n//               document.querySelectorAll('script[type=\"application/ld+json\"]')\r\n//             );\r\n//             return schemaScripts\r\n//               .map((script) => {\r\n//                 try {\r\n//                   return JSON.parse(script.innerText);\r\n//                 } catch {\r\n//                   return null;\r\n//                 }\r\n//               })\r\n//               .filter(Boolean);\r\n//           },\r\n//         },\r\n//         ([result]) => {\r\n//           setSchemas(result.result || []);\r\n//         }\r\n//       );\r\n//     };\r\n\r\n//     fetchSchemas();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Schema</h2>\r\n//       <p className=\"schema-description\">\r\n//         <strong>\r\n//           Schema Markup is a semantic vocabulary of tags that helps search\r\n//           engines understand your webpage and better represent it in the search\r\n//           results.\r\n//         </strong>\r\n//       </p>\r\n//       <div className=\"schema-container\">\r\n//         {schemas.length > 0 ? (\r\n//           schemas.map((schema, index) => (\r\n//             <SchemaItem\r\n//               key={index}\r\n//               data={schema}\r\n//               title={schema[\"@type\"] || `Schema ${index + 1}`}\r\n//             />\r\n//           ))\r\n//         ) : (\r\n//           <div className=\"no-items\" id=\"no-schema\">\r\n//             <p>No Schema Found on this Website.</p>\r\n//             <img src=\"notfound.svg\" alt=\"Not Found\" />\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const SchemaItem = ({ data, title }) => {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n\r\n//   const toggleOpen = () => setIsOpen(!isOpen);\r\n\r\n//   const renderValue = (key, value) => {\r\n//     if (typeof value === \"object\" && value !== null) {\r\n//       return <SchemaItem data={value} title={value[\"@type\"] || key} />;\r\n//     }\r\n//     return (\r\n//       <div className=\"schema-value\">\r\n//         <strong>{key}:</strong> {value}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"schema-item\">\r\n//       <div className=\"schema-header\" onClick={toggleOpen}>\r\n//         <span>{title}</span>\r\n//         <button>{isOpen ? \"▲\" : \"▼\"}</button>\r\n//       </div>\r\n//       {isOpen && (\r\n//         <div className=\"schema-content\">\r\n//           {Object.entries(data).map(([key, value], index) => (\r\n//             <div key={index} className=\"schema-entry\">\r\n//               {renderValue(key, value)}\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SchemaViewer;\r\n","import React, { useState } from \"react\";\r\nimport \"./PageSpeed.css\";\r\n\r\nconst PageSpeedTest = () => {\r\n  const [url, setUrl] = useState(\"\");\r\n  const [desktopResult, setDesktopResult] = useState(null);\r\n  const [mobileResult, setMobileResult] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const getActiveTabUrl = async () => {\r\n    const [tab] = await chrome.tabs.query({\r\n      active: true,\r\n      currentWindow: true,\r\n    });\r\n    return tab.url;\r\n  };\r\n\r\n  const API_KEY = \"AIzaSyCdskX2l4jTGn8RXH9zjDqnV31aHdhxTEU\";\r\n\r\n  const fetchPageSpeedData = async (url, strategy) => {\r\n    const endpoint = `https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=${url}&strategy=${strategy}&key=${API_KEY}`;\r\n    const response = await fetch(endpoint);\r\n    if (!response.ok) throw new Error(\"Failed to fetch PageSpeed data\");\r\n    return response.json();\r\n  };\r\n\r\n  const runTest = async () => {\r\n    setError(\"\");\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const activeUrl = await getActiveTabUrl();\r\n      setUrl(activeUrl);\r\n\r\n      const [desktop, mobile] = await Promise.all([\r\n        fetchPageSpeedData(activeUrl, \"desktop\"),\r\n        fetchPageSpeedData(activeUrl, \"mobile\"),\r\n      ]);\r\n\r\n      setDesktopResult(desktop.lighthouseResult);\r\n      setMobileResult(mobile.lighthouseResult);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const getScoreColor = (score) => {\r\n    if (score >= 85) return \"#4caf50\";\r\n    if (score >= 50) return \"#ffc107\";\r\n    return \"#f44336\";\r\n  };\r\n\r\n  const renderMetrics = (result) => {\r\n    const audits = result.audits;\r\n    return (\r\n      <div className=\"metrics\">\r\n        <p>\r\n          <strong>First Contentful Paint:</strong>{\" \"}\r\n          {audits[\"first-contentful-paint\"].displayValue}\r\n        </p>\r\n        <p>\r\n          <strong>Largest Contentful Paint:</strong>{\" \"}\r\n          {audits[\"largest-contentful-paint\"].displayValue}\r\n        </p>\r\n        <p>\r\n          <strong>Total Blocking Time:</strong>{\" \"}\r\n          {audits[\"total-blocking-time\"].displayValue}\r\n        </p>\r\n        <p>\r\n          <strong>Cumulative Layout Shift:</strong>{\" \"}\r\n          {audits[\"cumulative-layout-shift\"].displayValue}\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderScoreCard = (result, strategy) => {\r\n    const score = result.categories.performance.score * 100;\r\n    const scoreColor = getScoreColor(score);\r\n\r\n    return (\r\n      <div className=\"score-card\">\r\n        <div\r\n          className=\"score-circle\"\r\n          style={{\r\n            backgroundColor: `white`,\r\n            backgroundImage: `conic-gradient(${scoreColor} ${score}%, #f3f3f3 ${score}%)`,\r\n          }}\r\n        >\r\n          <span>{score}</span>\r\n        </div>\r\n        <p className=\"circle-label\">{strategy} PageSpeed</p>\r\n        <p className=\"url-text\">\r\n          Google PageSpeed Insights for <br />{\" \"}\r\n          <span className=\"url\">{url}</span>\r\n        </p>\r\n        {renderMetrics(result)}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"pagespeed-container\">\r\n      <h2>Page Speed Test</h2>\r\n      <button onClick={runTest} disabled={isLoading}>\r\n        {isLoading ? \"Running Test...\" : \"Run Speed Test\"}\r\n      </button>\r\n      {isLoading && (\r\n        <div className=\"active-tab-container\">\r\n          <p>It Might Take a While to Process</p>\r\n          <img src=\"image/loading.gif\" alt=\"Loading\" className=\"loading\" />\r\n        </div>\r\n      )}\r\n      {error && <p className=\"error\">{error}</p>}\r\n\r\n      <div className=\"score-container\">\r\n        {mobileResult && renderScoreCard(mobileResult, \"Mobile\")}\r\n        {desktopResult && renderScoreCard(desktopResult, \"Desktop\")}\r\n      </div>\r\n\r\n      {desktopResult && mobileResult && (\r\n        <div className=\"legend\">\r\n          <div>\r\n            <span className=\"legend-color green\"></span>\r\n            <strong>Good</strong>\r\n          </div>\r\n          <div>\r\n            <span className=\"legend-color yellow\"></span>\r\n            <strong>Can Be Better</strong>\r\n          </div>\r\n          <div>\r\n            <span className=\"legend-color red\"></span>\r\n            <strong>Need to Be Updated</strong>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageSpeedTest;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-content\">\r\n        <p className=\"footer-text\">\r\n          For better results, visualization, and automated SEO audit\r\n          <br /> of your website, visit Digispot-AI.\r\n        </p>\r\n        <button\r\n          className=\"footer-button\"\r\n          onClick={() => window.open(\"https://digispot.ai\")}\r\n        >\r\n          Digispot-AI\r\n        </button>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\r\nimport TabNavigation from \"./components/navigator/TabNavigation\";\r\nimport Summary from \"./tabs/summary/Summary\";\r\nimport Links from \"./tabs/links/Links\";\r\nimport Images from \"./tabs/imagestab/Images\";\r\nimport Header from \"./tabs/header/Header\";\r\nimport Schema from \"./tabs/schema/Schema\";\r\nimport PageSpeedTest from \"./tabs/pagespeed/PageSpeed\";\r\nimport Footer from \"./components/footer/Footer\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [activeTab, setActiveTab] = useState(\"summary\");\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <TabNavigation activeTab={activeTab} setActiveTab={setActiveTab} />\r\n      <div className=\"app-content\">\r\n        {activeTab === \"summary\" && <Summary />}\r\n        {activeTab === \"links\" && <Links />}\r\n        {activeTab === \"images\" && <Images />}\r\n        {activeTab === \"headers\" && <Header />}\r\n        {activeTab === \"schema\" && <Schema />}\r\n        {activeTab === \"pagespeedtest\" && <PageSpeedTest />}\r\n      </div>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import TabNavigation from \"./components/navigator/TabNavigation\";\r\n// import Summary from \"./tabs/summary/Summary\";\r\n// import Links from \"./tabs/links/Links\";\r\n// import Images from \"./tabs/imagestab/Images\";\r\n// import Header from \"./tabs/header/Header\";\r\n// import Schema from \"./tabs/schema/Schema\";\r\n// import PageSpeedTest from \"./tabs/pagespeed/PageSpeed\";\r\n// import Footer from \"./components/footer/Footer\";\r\n// import \"./App.css\";\r\n\r\n// const App = () => {\r\n//   const [activeTab, setActiveTab] = useState(\"summary\");\r\n\r\n//   // State to track all tabs data\r\n//   const [tabData, setTabData] = useState({\r\n//     summary: null,\r\n//     links: null,\r\n//     images: null,\r\n//     headers: null,\r\n//     schema: null,\r\n//     pagespeedtest: null,\r\n//   });\r\n\r\n//   // Load data from chrome.storage when the app is initialized\r\n//   useEffect(() => {\r\n//     chrome.storage.local.get(null, (data) => {\r\n//       setTabData((prev) => ({ ...prev, ...data }));\r\n//     });\r\n//   }, []);\r\n\r\n//   // Save activeTab data to chrome.storage\r\n//   const saveTabData = (tabName, data) => {\r\n//     setTabData((prev) => ({ ...prev, [tabName]: data }));\r\n//     chrome.storage.local.set({ [tabName]: data });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app-container\">\r\n//       <TabNavigation activeTab={activeTab} setActiveTab={setActiveTab} />\r\n\r\n//       <div className=\"app-content\">\r\n//         {activeTab === \"summary\" && (\r\n//           <Summary\r\n//             data={tabData.summary}\r\n//             saveData={(data) => saveTabData(\"summary\", data)}\r\n//           />\r\n//         )}\r\n//         {activeTab === \"links\" && (\r\n//           <Links\r\n//             data={tabData.links}\r\n//             saveData={(data) => saveTabData(\"links\", data)}\r\n//           />\r\n//         )}\r\n//         {activeTab === \"images\" && (\r\n//           <Images\r\n//             data={tabData.images}\r\n//             saveData={(data) => saveTabData(\"images\", data)}\r\n//           />\r\n//         )}\r\n//         {activeTab === \"headers\" && (\r\n//           <Header\r\n//             data={tabData.headers}\r\n//             saveData={(data) => saveTabData(\"headers\", data)}\r\n//           />\r\n//         )}\r\n//         {activeTab === \"schema\" && (\r\n//           <Schema\r\n//             data={tabData.schema}\r\n//             saveData={(data) => saveTabData(\"schema\", data)}\r\n//           />\r\n//         )}\r\n//         {activeTab === \"pagespeedtest\" && (\r\n//           <PageSpeedTest\r\n//             data={tabData.pagespeedtest}\r\n//             saveData={(data) => saveTabData(\"pagespeedtest\", data)}\r\n//           />\r\n//         )}\r\n//       </div>\r\n\r\n//       <Footer />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport App from \"./App\";\r\n// import \"./styles.css\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<App />);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t887: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwebsite_info_crawler\"] = self[\"webpackChunkwebsite_info_crawler\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(764)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","_ref","activeTab","setActiveTab","React","className","onClick","Summary","info","setInfo","useState","loading","setLoading","useEffect","async","tab","chrome","tabs","query","active","currentWindow","tabId","id","scripting","executeScript","target","func","robotsMeta","document","querySelector","content","xRobotsMeta","lang","documentElement","title","description","canonical","href","robots","xRobots","url","window","location","result","fetchedData","fetchWebsiteInfo","src","alt","open","Links","links","setLinks","view","setView","Array","from","querySelectorAll","map","a","textContent","trim","filter","link","origin","internal","startsWith","external","unique","Set","find","total","fetchLinks","length","exportToCSV","csvRows","push","forEach","_ref2","csvContent","join","blob","Blob","type","URL","createObjectURL","createElement","download","click","revokeObjectURL","index","key","rel","l","Image","images","setImages","noAlt","noLongDesc","noSrc","img","longDesc","longdesc","width","naturalWidth","height","naturalHeight","fetchImages","handleImageClick","imgSrc","newTab","body","innerHTML","split","pop","exportCSV","csvData","Headers","headers","setHeaders","headerCounts","setHeaderCounts","h1","h2","h3","h4","h5","h6","header","tag","tagName","toLowerCase","text","fetchedHeaders","counts","h","fetchHeaders","isEmpty","Object","values","every","count","keys","toUpperCase","SchemaViewer","schemas","setSchemas","linkDistance","setLinkDistance","fontSize","setFontSize","nodeSize","setNodeSize","isDragEnabled","setIsDragEnabled","graphRef","useRef","script","JSON","parse","innerText","Boolean","fetchSchemas","graphData","buildGraphData","renderGraph","nodes","name","nodeId","traverse","data","parentId","arguments","undefined","linkName","currentId","source","entries","value","schema","_ref3","d3","current","selectAll","remove","svg","append","attr","call","scaleExtent","on","event","graphGroup","transform","simulation","force","d","distance","strength","enter","linkLabel","node","alphaTarget","restart","subject","fx","x","fy","y","drag","label","style","prev","downloadGraphAsPng","svgElement","clonedSvg","cloneNode","bbox","getBBox","padding","setAttribute","rect","createElementNS","insertBefore","firstChild","svgString","XMLSerializer","serializeToString","onload","canvas","ctx","getContext","fillStyle","fillRect","drawImage","toDataURL","min","max","onChange","e","Number","ref","PageSpeedTest","setUrl","desktopResult","setDesktopResult","mobileResult","setMobileResult","isLoading","setIsLoading","error","setError","fetchPageSpeedData","strategy","endpoint","response","fetch","ok","Error","json","renderScoreCard","score","categories","performance","scoreColor","getScoreColor","backgroundColor","backgroundImage","audits","displayValue","renderMetrics","activeUrl","getActiveTabUrl","desktop","mobile","Promise","all","lighthouseResult","err","message","disabled","Footer","App","TabNavigation","Images","Header","Schema","ReactDOM","getElementById","render","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","splice","r","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}